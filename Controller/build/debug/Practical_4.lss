
build/debug/Practical_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002e5c  08002e5c  00003e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee0  08002ee0  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ee0  08002ee0  00003ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ee8  08002ee8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee8  08002ee8  00003ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002eec  08002eec  00003eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002ef0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08002f4c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08002f4c  000042c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c539  00000000  00000000  000040c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f9a  00000000  00000000  000105fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005ae0  00000000  00000000  00012598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000840  00000000  00000000  00018078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000695  00000000  00000000  000188b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a06f  00000000  00000000  00018f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003544  00000000  00000000  00022fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013f0  00000000  00000000  00026500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000196  00000000  00000000  000278f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b80c 	b.w	80002b0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f002 fc54 	bl	8002b4c <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_idiv0>:
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop

080002b4 <__do_global_dtors_aux>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	4c05      	ldr	r4, [pc, #20]	@ (80002cc <__do_global_dtors_aux+0x18>)
 80002b8:	7823      	ldrb	r3, [r4, #0]
 80002ba:	b933      	cbnz	r3, 80002ca <__do_global_dtors_aux+0x16>
 80002bc:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x1c>)
 80002be:	b113      	cbz	r3, 80002c6 <__do_global_dtors_aux+0x12>
 80002c0:	4804      	ldr	r0, [pc, #16]	@ (80002d4 <__do_global_dtors_aux+0x20>)
 80002c2:	f3af 8000 	nop.w
 80002c6:	2301      	movs	r3, #1
 80002c8:	7023      	strb	r3, [r4, #0]
 80002ca:	bd10      	pop	{r4, pc}
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	00000000 	.word	0x00000000
 80002d4:	08002e44 	.word	0x08002e44

080002d8 <frame_dummy>:
 80002d8:	b508      	push	{r3, lr}
 80002da:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <frame_dummy+0x10>)
 80002dc:	b11b      	cbz	r3, 80002e6 <frame_dummy+0xe>
 80002de:	4903      	ldr	r1, [pc, #12]	@ (80002ec <frame_dummy+0x14>)
 80002e0:	4803      	ldr	r0, [pc, #12]	@ (80002f0 <frame_dummy+0x18>)
 80002e2:	f3af 8000 	nop.w
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	00000000 	.word	0x00000000
 80002ec:	20000060 	.word	0x20000060
 80002f0:	08002e44 	.word	0x08002e44

080002f4 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 80002f4:	b082      	sub	sp, #8
	  volatile unsigned int counter;
	  microseconds *= 3;
 80002f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	  for(counter = 0; counter<microseconds; counter++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	e004      	b.n	800030a <delay+0x16>
	  {
	    __asm("nop");
 8000300:	bf00      	nop
	    __asm("nop");
 8000302:	bf00      	nop
	  for(counter = 0; counter<microseconds; counter++)
 8000304:	9b01      	ldr	r3, [sp, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b01      	ldr	r3, [sp, #4]
 800030c:	4283      	cmp	r3, r0
 800030e:	d3f7      	bcc.n	8000300 <delay+0xc>
	  }
}
 8000310:	b002      	add	sp, #8
 8000312:	4770      	bx	lr

08000314 <pulse_strobe>:
{
 8000314:	b510      	push	{r4, lr}
    delay(20);				// Delay
 8000316:	2014      	movs	r0, #20
 8000318:	f7ff ffec 	bl	80002f4 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 800031c:	4c09      	ldr	r4, [pc, #36]	@ (8000344 <pulse_strobe+0x30>)
 800031e:	69a3      	ldr	r3, [r4, #24]
 8000320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000324:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 8000326:	2014      	movs	r0, #20
 8000328:	f7ff ffe4 	bl	80002f4 <delay>
    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 800032c:	69a3      	ldr	r3, [r4, #24]
 800032e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000332:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 8000334:	2014      	movs	r0, #20
 8000336:	f7ff ffdd 	bl	80002f4 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 800033a:	69a3      	ldr	r3, [r4, #24]
 800033c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000340:	61a3      	str	r3, [r4, #24]
}
 8000342:	bd10      	pop	{r4, pc}
 8000344:	40020800 	.word	0x40020800

08000348 <lcd_putchar>:
{
 8000348:	b510      	push	{r4, lr}
 800034a:	4604      	mov	r4, r0
	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 800034c:	4a3d      	ldr	r2, [pc, #244]	@ (8000444 <lcd_putchar+0xfc>)
 800034e:	6993      	ldr	r3, [r2, #24]
 8000350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000354:	6193      	str	r3, [r2, #24]
        if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 8000356:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800035a:	d141      	bne.n	80003e0 <lcd_putchar+0x98>
        	GPIOA->BSRR |= LCD_D7_RESET;
 800035c:	4a3a      	ldr	r2, [pc, #232]	@ (8000448 <lcd_putchar+0x100>)
 800035e:	6993      	ldr	r3, [r2, #24]
 8000360:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000364:	6193      	str	r3, [r2, #24]
        if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)       
 8000366:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800036a:	d040      	beq.n	80003ee <lcd_putchar+0xa6>
            GPIOA->BSRR |= LCD_D6_SET;
 800036c:	4a36      	ldr	r2, [pc, #216]	@ (8000448 <lcd_putchar+0x100>)
 800036e:	6993      	ldr	r3, [r2, #24]
 8000370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000374:	6193      	str	r3, [r2, #24]
        if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8000376:	f014 0f20 	tst.w	r4, #32
 800037a:	d03e      	beq.n	80003fa <lcd_putchar+0xb2>
        	GPIOB->BSRR |= LCD_D5_SET;                 
 800037c:	4a33      	ldr	r2, [pc, #204]	@ (800044c <lcd_putchar+0x104>)
 800037e:	6993      	ldr	r3, [r2, #24]
 8000380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000384:	6193      	str	r3, [r2, #24]
        if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 8000386:	f014 0f10 	tst.w	r4, #16
 800038a:	d03c      	beq.n	8000406 <lcd_putchar+0xbe>
        	GPIOB->BSRR |= LCD_D4_SET;
 800038c:	4a2f      	ldr	r2, [pc, #188]	@ (800044c <lcd_putchar+0x104>)
 800038e:	6993      	ldr	r3, [r2, #24]
 8000390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000394:	6193      	str	r3, [r2, #24]
        pulse_strobe ();		// Send data
 8000396:	f7ff ffbd 	bl	8000314 <pulse_strobe>
        if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 800039a:	f014 0f08 	tst.w	r4, #8
 800039e:	d038      	beq.n	8000412 <lcd_putchar+0xca>
        	GPIOA->BSRR |= LCD_D7_SET;
 80003a0:	4a29      	ldr	r2, [pc, #164]	@ (8000448 <lcd_putchar+0x100>)
 80003a2:	6993      	ldr	r3, [r2, #24]
 80003a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003a8:	6193      	str	r3, [r2, #24]
        if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)         
 80003aa:	f014 0f04 	tst.w	r4, #4
 80003ae:	d036      	beq.n	800041e <lcd_putchar+0xd6>
            GPIOA->BSRR |= LCD_D6_SET;
 80003b0:	4a25      	ldr	r2, [pc, #148]	@ (8000448 <lcd_putchar+0x100>)
 80003b2:	6993      	ldr	r3, [r2, #24]
 80003b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003b8:	6193      	str	r3, [r2, #24]
        if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 80003ba:	f014 0f02 	tst.w	r4, #2
 80003be:	d034      	beq.n	800042a <lcd_putchar+0xe2>
        	GPIOB->BSRR |= LCD_D5_SET;       
 80003c0:	4a22      	ldr	r2, [pc, #136]	@ (800044c <lcd_putchar+0x104>)
 80003c2:	6993      	ldr	r3, [r2, #24]
 80003c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003c8:	6193      	str	r3, [r2, #24]
        if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80003ca:	f014 0f01 	tst.w	r4, #1
 80003ce:	d032      	beq.n	8000436 <lcd_putchar+0xee>
        	GPIOB->BSRR |= LCD_D4_SET;
 80003d0:	4a1e      	ldr	r2, [pc, #120]	@ (800044c <lcd_putchar+0x104>)
 80003d2:	6993      	ldr	r3, [r2, #24]
 80003d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d8:	6193      	str	r3, [r2, #24]
        pulse_strobe();			// Send data
 80003da:	f7ff ff9b 	bl	8000314 <pulse_strobe>
}
 80003de:	bd10      	pop	{r4, pc}
        	GPIOA->BSRR |= LCD_D7_SET;
 80003e0:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80003e4:	6993      	ldr	r3, [r2, #24]
 80003e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	e7bb      	b.n	8000366 <lcd_putchar+0x1e>
            GPIOA->BSRR |= LCD_D6_RESET;
 80003ee:	4a16      	ldr	r2, [pc, #88]	@ (8000448 <lcd_putchar+0x100>)
 80003f0:	6993      	ldr	r3, [r2, #24]
 80003f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	e7bd      	b.n	8000376 <lcd_putchar+0x2e>
        	GPIOB->BSRR |= LCD_D5_RESET;
 80003fa:	4a14      	ldr	r2, [pc, #80]	@ (800044c <lcd_putchar+0x104>)
 80003fc:	6993      	ldr	r3, [r2, #24]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	e7bf      	b.n	8000386 <lcd_putchar+0x3e>
        	GPIOB->BSRR |= LCD_D4_RESET;
 8000406:	4a11      	ldr	r2, [pc, #68]	@ (800044c <lcd_putchar+0x104>)
 8000408:	6993      	ldr	r3, [r2, #24]
 800040a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	e7c1      	b.n	8000396 <lcd_putchar+0x4e>
        	GPIOA->BSRR |= LCD_D7_RESET;
 8000412:	4a0d      	ldr	r2, [pc, #52]	@ (8000448 <lcd_putchar+0x100>)
 8000414:	6993      	ldr	r3, [r2, #24]
 8000416:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	e7c5      	b.n	80003aa <lcd_putchar+0x62>
            GPIOA->BSRR |= LCD_D6_RESET;
 800041e:	4a0a      	ldr	r2, [pc, #40]	@ (8000448 <lcd_putchar+0x100>)
 8000420:	6993      	ldr	r3, [r2, #24]
 8000422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	e7c7      	b.n	80003ba <lcd_putchar+0x72>
        	GPIOB->BSRR |= LCD_D5_RESET;
 800042a:	4a08      	ldr	r2, [pc, #32]	@ (800044c <lcd_putchar+0x104>)
 800042c:	6993      	ldr	r3, [r2, #24]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	e7c9      	b.n	80003ca <lcd_putchar+0x82>
        	GPIOB->BSRR |= LCD_D4_RESET;
 8000436:	4a05      	ldr	r2, [pc, #20]	@ (800044c <lcd_putchar+0x104>)
 8000438:	6993      	ldr	r3, [r2, #24]
 800043a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	e7cb      	b.n	80003da <lcd_putchar+0x92>
 8000442:	bf00      	nop
 8000444:	40020800 	.word	0x40020800
 8000448:	40020000 	.word	0x40020000
 800044c:	40020400 	.word	0x40020400

08000450 <lcd_putstring>:
{
 8000450:	b538      	push	{r3, r4, r5, lr}
 8000452:	4605      	mov	r5, r0
    unsigned char count = 0;
 8000454:	2400      	movs	r4, #0
    while (instring[count])		// Until the null terminator is reached
 8000456:	e003      	b.n	8000460 <lcd_putstring+0x10>
    	lcd_putchar(instring[count]);	// Write each character to LCD
 8000458:	f7ff ff76 	bl	8000348 <lcd_putchar>
	    count++;
 800045c:	3401      	adds	r4, #1
 800045e:	b2e4      	uxtb	r4, r4
    while (instring[count])		// Until the null terminator is reached
 8000460:	5d28      	ldrb	r0, [r5, r4]
 8000462:	2800      	cmp	r0, #0
 8000464:	d1f8      	bne.n	8000458 <lcd_putstring+0x8>
}
 8000466:	bd38      	pop	{r3, r4, r5, pc}

08000468 <lcd_command>:
{
 8000468:	b510      	push	{r4, lr}
 800046a:	4604      	mov	r4, r0
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 800046c:	4a3f      	ldr	r2, [pc, #252]	@ (800056c <lcd_command+0x104>)
 800046e:	6993      	ldr	r3, [r2, #24]
 8000470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000474:	6193      	str	r3, [r2, #24]
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 8000476:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800047a:	d145      	bne.n	8000508 <lcd_command+0xa0>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800047c:	4a3c      	ldr	r2, [pc, #240]	@ (8000570 <lcd_command+0x108>)
 800047e:	6993      	ldr	r3, [r2, #24]
 8000480:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000484:	6193      	str	r3, [r2, #24]
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 8000486:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800048a:	d044      	beq.n	8000516 <lcd_command+0xae>
        GPIOA->BSRR |= LCD_D6_SET;
 800048c:	4a38      	ldr	r2, [pc, #224]	@ (8000570 <lcd_command+0x108>)
 800048e:	6993      	ldr	r3, [r2, #24]
 8000490:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000494:	6193      	str	r3, [r2, #24]
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8000496:	f014 0f20 	tst.w	r4, #32
 800049a:	d042      	beq.n	8000522 <lcd_command+0xba>
    	GPIOB->BSRR |= LCD_D5_SET;	
 800049c:	4a35      	ldr	r2, [pc, #212]	@ (8000574 <lcd_command+0x10c>)
 800049e:	6993      	ldr	r3, [r2, #24]
 80004a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004a4:	6193      	str	r3, [r2, #24]
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80004a6:	f014 0f10 	tst.w	r4, #16
 80004aa:	d040      	beq.n	800052e <lcd_command+0xc6>
    	GPIOB->BSRR |= LCD_D4_SET;
 80004ac:	4a31      	ldr	r2, [pc, #196]	@ (8000574 <lcd_command+0x10c>)
 80004ae:	6993      	ldr	r3, [r2, #24]
 80004b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004b4:	6193      	str	r3, [r2, #24]
    pulse_strobe ();			// Send data
 80004b6:	f7ff ff2d 	bl	8000314 <pulse_strobe>
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80004ba:	f014 0f08 	tst.w	r4, #8
 80004be:	d03c      	beq.n	800053a <lcd_command+0xd2>
    	GPIOA->BSRR |= LCD_D7_SET;
 80004c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000570 <lcd_command+0x108>)
 80004c2:	6993      	ldr	r3, [r2, #24]
 80004c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004c8:	6193      	str	r3, [r2, #24]
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 80004ca:	f014 0f04 	tst.w	r4, #4
 80004ce:	d03a      	beq.n	8000546 <lcd_command+0xde>
        GPIOA->BSRR |= LCD_D6_SET;
 80004d0:	4a27      	ldr	r2, [pc, #156]	@ (8000570 <lcd_command+0x108>)
 80004d2:	6993      	ldr	r3, [r2, #24]
 80004d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004d8:	6193      	str	r3, [r2, #24]
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 80004da:	f014 0f02 	tst.w	r4, #2
 80004de:	d038      	beq.n	8000552 <lcd_command+0xea>
    	GPIOB->BSRR |= LCD_D5_SET;         
 80004e0:	4a24      	ldr	r2, [pc, #144]	@ (8000574 <lcd_command+0x10c>)
 80004e2:	6993      	ldr	r3, [r2, #24]
 80004e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004e8:	6193      	str	r3, [r2, #24]
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80004ea:	f014 0f01 	tst.w	r4, #1
 80004ee:	d036      	beq.n	800055e <lcd_command+0xf6>
    	GPIOB->BSRR |= LCD_D4_SET;
 80004f0:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <lcd_command+0x10c>)
 80004f2:	6993      	ldr	r3, [r2, #24]
 80004f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f8:	6193      	str	r3, [r2, #24]
    pulse_strobe();			// Send data
 80004fa:	f7ff ff0b 	bl	8000314 <pulse_strobe>
    delay(3000);
 80004fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000502:	f7ff fef7 	bl	80002f4 <delay>
}
 8000506:	bd10      	pop	{r4, pc}
    	GPIOA->BSRR |= LCD_D7_SET;
 8000508:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800050c:	6993      	ldr	r3, [r2, #24]
 800050e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	e7b7      	b.n	8000486 <lcd_command+0x1e>
        GPIOA->BSRR |= LCD_D6_RESET;
 8000516:	4a16      	ldr	r2, [pc, #88]	@ (8000570 <lcd_command+0x108>)
 8000518:	6993      	ldr	r3, [r2, #24]
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	e7b9      	b.n	8000496 <lcd_command+0x2e>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000522:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <lcd_command+0x10c>)
 8000524:	6993      	ldr	r3, [r2, #24]
 8000526:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	e7bb      	b.n	80004a6 <lcd_command+0x3e>
    	GPIOB->BSRR |= LCD_D4_RESET;
 800052e:	4a11      	ldr	r2, [pc, #68]	@ (8000574 <lcd_command+0x10c>)
 8000530:	6993      	ldr	r3, [r2, #24]
 8000532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	e7bd      	b.n	80004b6 <lcd_command+0x4e>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800053a:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <lcd_command+0x108>)
 800053c:	6993      	ldr	r3, [r2, #24]
 800053e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	e7c1      	b.n	80004ca <lcd_command+0x62>
        GPIOA->BSRR |= LCD_D6_RESET;
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <lcd_command+0x108>)
 8000548:	6993      	ldr	r3, [r2, #24]
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	e7c3      	b.n	80004da <lcd_command+0x72>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000552:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <lcd_command+0x10c>)
 8000554:	6993      	ldr	r3, [r2, #24]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	e7c5      	b.n	80004ea <lcd_command+0x82>
    	GPIOB->BSRR |= LCD_D4_RESET;
 800055e:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <lcd_command+0x10c>)
 8000560:	6993      	ldr	r3, [r2, #24]
 8000562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	e7c7      	b.n	80004fa <lcd_command+0x92>
 800056a:	bf00      	nop
 800056c:	40020800 	.word	0x40020800
 8000570:	40020000 	.word	0x40020000
 8000574:	40020400 	.word	0x40020400

08000578 <init_LCD>:
{
 8000578:	b508      	push	{r3, lr}
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <init_LCD+0x68>)
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	f042 0201 	orr.w	r2, r2, #1
 8000582:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f042 0202 	orr.w	r2, r2, #2
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f042 0204 	orr.w	r2, r2, #4
 8000592:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 8000594:	4a13      	ldr	r2, [pc, #76]	@ (80005e4 <init_LCD+0x6c>)
 8000596:	6813      	ldr	r3, [r2, #0]
 8000598:	f043 4382 	orr.w	r3, r3, #1090519040	@ 0x41000000
 800059c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 800059e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80005a2:	6813      	ldr	r3, [r2, #0]
 80005a4:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80005a8:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 80005aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80005ae:	6813      	ldr	r3, [r2, #0]
 80005b0:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80005b4:	6013      	str	r3, [r2, #0]
    delay(30000);			// Allow the LCD some power up time (~30ms)
 80005b6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80005ba:	f7ff fe9b 	bl	80002f4 <delay>
    lcd_command(POWER_UP);		// Power up initialization for the lcd
 80005be:	2033      	movs	r0, #51	@ 0x33
 80005c0:	f7ff ff52 	bl	8000468 <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 80005c4:	2032      	movs	r0, #50	@ 0x32
 80005c6:	f7ff ff4f 	bl	8000468 <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 80005ca:	200c      	movs	r0, #12
 80005cc:	f7ff ff4c 	bl	8000468 <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 80005d0:	2028      	movs	r0, #40	@ 0x28
 80005d2:	f7ff ff49 	bl	8000468 <lcd_command>
    lcd_command(CLEAR);			// Clear display
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ff46 	bl	8000468 <lcd_command>
}
 80005dc:	bd08      	pop	{r3, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ec:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	ad03      	add	r5, sp, #12
 80005f0:	2400      	movs	r4, #0
 80005f2:	9403      	str	r4, [sp, #12]
 80005f4:	9404      	str	r4, [sp, #16]
 80005f6:	9405      	str	r4, [sp, #20]
 80005f8:	9406      	str	r4, [sp, #24]
 80005fa:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	9400      	str	r4, [sp, #0]
 80005fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000734 <MX_GPIO_Init+0x14c>)
 8000600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000602:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000606:	631a      	str	r2, [r3, #48]	@ 0x30
 8000608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	9401      	str	r4, [sp, #4]
 8000614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000616:	f042 0201 	orr.w	r2, r2, #1
 800061a:	631a      	str	r2, [r3, #48]	@ 0x30
 800061c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061e:	f002 0201 	and.w	r2, r2, #1
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	9402      	str	r4, [sp, #8]
 8000628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800062a:	f042 0202 	orr.w	r2, r2, #2
 800062e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	9302      	str	r3, [sp, #8]
 8000638:	9b02      	ldr	r3, [sp, #8]

  // -------------------------------
  // LCD pins configuration
  // -------------------------------
  // Configure PC14 (RS) and PC15 (E) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800063a:	f44f 4b40 	mov.w	fp, #49152	@ 0xc000
 800063e:	f8cd b00c 	str.w	fp, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	f04f 0801 	mov.w	r8, #1
 8000646:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064a:	4629      	mov	r1, r5
 800064c:	483a      	ldr	r0, [pc, #232]	@ (8000738 <MX_GPIO_Init+0x150>)
 800064e:	f000 fcf9 	bl	8001044 <HAL_GPIO_Init>

  // Configure PB8 (D4) and PB9 (D5) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000652:	f44f 7940 	mov.w	r9, #768	@ 0x300
 8000656:	f8cd 900c 	str.w	r9, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	4f38      	ldr	r7, [pc, #224]	@ (800073c <MX_GPIO_Init+0x154>)
 800065c:	4629      	mov	r1, r5
 800065e:	4638      	mov	r0, r7
 8000660:	f000 fcf0 	bl	8001044 <HAL_GPIO_Init>

  // Configure PA12 (D6) and PA15 (D7) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_15;
 8000664:	f44f 4a10 	mov.w	sl, #36864	@ 0x9000
 8000668:	f8cd a00c 	str.w	sl, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	4e34      	ldr	r6, [pc, #208]	@ (8000740 <MX_GPIO_Init+0x158>)
 800066e:	4629      	mov	r1, r5
 8000670:	4630      	mov	r0, r6
 8000672:	f000 fce7 	bl	8001044 <HAL_GPIO_Init>

  // Set all LCD pins LOW initially
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000676:	4622      	mov	r2, r4
 8000678:	4659      	mov	r1, fp
 800067a:	482f      	ldr	r0, [pc, #188]	@ (8000738 <MX_GPIO_Init+0x150>)
 800067c:	f000 fdd2 	bl	8001224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000680:	4622      	mov	r2, r4
 8000682:	4649      	mov	r1, r9
 8000684:	4638      	mov	r0, r7
 8000686:	f000 fdcd 	bl	8001224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12 | GPIO_PIN_15, GPIO_PIN_RESET);
 800068a:	4622      	mov	r2, r4
 800068c:	4651      	mov	r1, sl
 800068e:	4630      	mov	r0, r6
 8000690:	f000 fdc8 	bl	8001224 <HAL_GPIO_WritePin>


  // -------------------------------
  // Button0 configuration (PA0)
  // -------------------------------
  GPIO_InitStruct.Pin = Button0_Pin;
 8000694:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; // Interrupt on rising edge
 8000698:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;         // Use pull-up resistor
 800069e:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	4629      	mov	r1, r5
 80006a4:	4630      	mov	r0, r6
 80006a6:	f000 fccd 	bl	8001044 <HAL_GPIO_Init>

  // Enable and set EXTI line 0 interrupt priority
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80006aa:	4622      	mov	r2, r4
 80006ac:	2102      	movs	r1, #2
 80006ae:	2006      	movs	r0, #6
 80006b0:	f000 fb56 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b4:	2006      	movs	r0, #6
 80006b6:	f000 fb63 	bl	8000d80 <HAL_NVIC_EnableIRQ>

  // Configure PC0, PC1, PC2, PC3 as inputs with interrupts
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 80006ba:	230f      	movs	r3, #15
 80006bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 80006be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;            // Enable internal pull-up resistor
 80006c4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	4629      	mov	r1, r5
 80006cc:	4630      	mov	r0, r6
 80006ce:	f000 fcb9 	bl	8001044 <HAL_GPIO_Init>
    
  // Enable and set EXTI line interrupts
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);  // SW0 on PC0
 80006d2:	4622      	mov	r2, r4
 80006d4:	2102      	movs	r1, #2
 80006d6:	2006      	movs	r0, #6
 80006d8:	f000 fb42 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006dc:	2006      	movs	r0, #6
 80006de:	f000 fb4f 	bl	8000d80 <HAL_NVIC_EnableIRQ>
    
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);  // SW1 on PC1
 80006e2:	4622      	mov	r2, r4
 80006e4:	2102      	movs	r1, #2
 80006e6:	2007      	movs	r0, #7
 80006e8:	f000 fb3a 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006ec:	2007      	movs	r0, #7
 80006ee:	f000 fb47 	bl	8000d80 <HAL_NVIC_EnableIRQ>
    
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // SW2 on PC2
 80006f2:	4622      	mov	r2, r4
 80006f4:	2102      	movs	r1, #2
 80006f6:	2008      	movs	r0, #8
 80006f8:	f000 fb32 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006fc:	2008      	movs	r0, #8
 80006fe:	f000 fb3f 	bl	8000d80 <HAL_NVIC_EnableIRQ>
    
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);  // SW3 on PC3
 8000702:	4622      	mov	r2, r4
 8000704:	2102      	movs	r1, #2
 8000706:	2009      	movs	r0, #9
 8000708:	f000 fb2a 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800070c:	2009      	movs	r0, #9
 800070e:	f000 fb37 	bl	8000d80 <HAL_NVIC_EnableIRQ>

   // Set PA5 and PA6 as analog mode, no pull-up/down
  GPIOA->MODER |= (3U << (5 * 2)) | (3U << (6 * 2));
 8000712:	6833      	ldr	r3, [r6, #0]
 8000714:	f443 5370 	orr.w	r3, r3, #15360	@ 0x3c00
 8000718:	6033      	str	r3, [r6, #0]
  GPIOA->PUPDR &= ~((3U << (5 * 2)) | (3U << (6 * 2)));
 800071a:	68f3      	ldr	r3, [r6, #12]
 800071c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8000720:	60f3      	str	r3, [r6, #12]

  GPIOB->MODER = 0x5555;
 8000722:	f245 5355 	movw	r3, #21845	@ 0x5555
 8000726:	603b      	str	r3, [r7, #0]
  GPIOB->ODR = 0xFF;
 8000728:	23ff      	movs	r3, #255	@ 0xff
 800072a:	617b      	str	r3, [r7, #20]
}
 800072c:	b009      	add	sp, #36	@ 0x24
 800072e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020000 	.word	0x40020000

08000744 <MX_DMA_Init>:
{
 8000744:	b500      	push	{lr}
 8000746:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000748:	2100      	movs	r1, #0
 800074a:	9101      	str	r1, [sp, #4]
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_DMA_Init+0x30>)
 800074e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000750:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
 8000756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000760:	460a      	mov	r2, r1
 8000762:	2010      	movs	r0, #16
 8000764:	f000 fafc 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000768:	2010      	movs	r0, #16
 800076a:	f000 fb09 	bl	8000d80 <HAL_NVIC_EnableIRQ>
}
 800076e:	b003      	add	sp, #12
 8000770:	f85d fb04 	ldr.w	pc, [sp], #4
 8000774:	40023800 	.word	0x40023800

08000778 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000778:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fd58 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
}
 8000780:	bd08      	pop	{r3, pc}

08000782 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000782:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000784:	2002      	movs	r0, #2
 8000786:	f000 fd53 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
}
 800078a:	bd08      	pop	{r3, pc}

0800078c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800078c:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800078e:	2004      	movs	r0, #4
 8000790:	f000 fd4e 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
}
 8000794:	bd08      	pop	{r3, pc}

08000796 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000796:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000798:	2008      	movs	r0, #8
 800079a:	f000 fd49 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
}
 800079e:	bd08      	pop	{r3, pc}

080007a0 <HAL_GPIO_EXTI_Callback>:

uint32_t lastInterruptTime[4] = {0};
#define DEBOUNCE_DELAY 200  // 200ms debounce

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007a0:	b510      	push	{r4, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	4604      	mov	r4, r0
    uint32_t currentTime = HAL_GetTick();
 80007a6:	f000 fa81 	bl	8000cac <HAL_GetTick>
    
    switch(GPIO_Pin)
 80007aa:	1e63      	subs	r3, r4, #1
 80007ac:	2b07      	cmp	r3, #7
 80007ae:	d80a      	bhi.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
 80007b0:	e8df f003 	tbb	[pc, r3]
 80007b4:	3c092104 	.word	0x3c092104
 80007b8:	57090909 	.word	0x57090909
    {
        case GPIO_PIN_0:  // SW0
            if((currentTime - lastInterruptTime[0]) > DEBOUNCE_DELAY)
 80007bc:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1ac3      	subs	r3, r0, r3
 80007c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80007c4:	d801      	bhi.n	80007ca <HAL_GPIO_EXTI_Callback+0x2a>
                char msg[] = "BTN3\r\n";
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
            }
            break;
    }
}
 80007c6:	b002      	add	sp, #8
 80007c8:	bd10      	pop	{r4, pc}
                lastInterruptTime[3] = currentTime;
 80007ca:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 80007cc:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN0\r\n";
 80007ce:	4b33      	ldr	r3, [pc, #204]	@ (800089c <HAL_GPIO_EXTI_Callback+0xfc>)
 80007d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80007da:	0c09      	lsrs	r1, r1, #16
 80007dc:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007e0:	4668      	mov	r0, sp
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	b282      	uxth	r2, r0
 80007ec:	4669      	mov	r1, sp
 80007ee:	482c      	ldr	r0, [pc, #176]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x100>)
 80007f0:	f001 fa2e 	bl	8001c50 <HAL_UART_Transmit>
 80007f4:	e7e7      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
            if((currentTime - lastInterruptTime[1]) > DEBOUNCE_DELAY)
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	1ac3      	subs	r3, r0, r3
 80007fc:	2bc8      	cmp	r3, #200	@ 0xc8
 80007fe:	d9e2      	bls.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
                lastInterruptTime[3] = currentTime;
 8000800:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000802:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN1\r\n";
 8000804:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0x104>)
 8000806:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080a:	9000      	str	r0, [sp, #0]
 800080c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8000810:	0c09      	lsrs	r1, r1, #16
 8000812:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000816:	4668      	mov	r0, sp
 8000818:	f7ff fcda 	bl	80001d0 <strlen>
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	b282      	uxth	r2, r0
 8000822:	4669      	mov	r1, sp
 8000824:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x100>)
 8000826:	f001 fa13 	bl	8001c50 <HAL_UART_Transmit>
 800082a:	e7cc      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
            if((currentTime - lastInterruptTime[2]) > DEBOUNCE_DELAY)
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	1ac3      	subs	r3, r0, r3
 8000832:	2bc8      	cmp	r3, #200	@ 0xc8
 8000834:	d9c7      	bls.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
                lastInterruptTime[3] = currentTime;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000838:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN2\r\n";
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x108>)
 800083c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000840:	9000      	str	r0, [sp, #0]
 8000842:	f8ad 1004 	strh.w	r1, [sp, #4]
 8000846:	0c09      	lsrs	r1, r1, #16
 8000848:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800084c:	4668      	mov	r0, sp
 800084e:	f7ff fcbf 	bl	80001d0 <strlen>
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	b282      	uxth	r2, r0
 8000858:	4669      	mov	r1, sp
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x100>)
 800085c:	f001 f9f8 	bl	8001c50 <HAL_UART_Transmit>
 8000860:	e7b1      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
            if((currentTime - lastInterruptTime[3]) > DEBOUNCE_DELAY)
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	1ac3      	subs	r3, r0, r3
 8000868:	2bc8      	cmp	r3, #200	@ 0xc8
 800086a:	d9ac      	bls.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
                lastInterruptTime[3] = currentTime;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_GPIO_EXTI_Callback+0xf8>)
 800086e:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN3\r\n";
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x10c>)
 8000872:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000876:	9000      	str	r0, [sp, #0]
 8000878:	f8ad 1004 	strh.w	r1, [sp, #4]
 800087c:	0c09      	lsrs	r1, r1, #16
 800087e:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000882:	4668      	mov	r0, sp
 8000884:	f7ff fca4 	bl	80001d0 <strlen>
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	b282      	uxth	r2, r0
 800088e:	4669      	mov	r1, sp
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x100>)
 8000892:	f001 f9dd 	bl	8001c50 <HAL_UART_Transmit>
}
 8000896:	e796      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0x26>
 8000898:	20000078 	.word	0x20000078
 800089c:	08002e5c 	.word	0x08002e5c
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	08002e64 	.word	0x08002e64
 80008a8:	08002e6c 	.word	0x08002e6c
 80008ac:	08002e74 	.word	0x08002e74

080008b0 <ADC1_Start>:

void ADC1_Start(uint8_t channel)
{
    ADC1->SQR3 = channel & 0x1F;                  // Select ADC channel
 80008b0:	f000 001f 	and.w	r0, r0, #31
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <ADC1_Start+0x14>)
 80008b6:	6358      	str	r0, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;                 // Start conversion
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80008be:	609a      	str	r2, [r3, #8]
}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40012000 	.word	0x40012000

080008c8 <USART1_IRQHandler>:
        // Initialization Error
        Error_Handler();
    }
}
void USART1_IRQHandler(void)
{
 80008c8:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&huart1);
 80008ca:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <USART1_IRQHandler+0xc>)
 80008cc:	f001 faae 	bl	8001e2c <HAL_UART_IRQHandler>
}
 80008d0:	bd08      	pop	{r3, pc}
 80008d2:	bf00      	nop
 80008d4:	200000c8 	.word	0x200000c8

080008d8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
 80008d8:	b508      	push	{r3, lr}
    if (ADC1->SR & ADC_SR_EOC)
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <ADC_IRQHandler+0x3c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f013 0f02 	tst.w	r3, #2
 80008e2:	d00d      	beq.n	8000900 <ADC_IRQHandler+0x28>
    {
        static uint8_t current_channel = 5;       // Start from channel 5
        uint16_t value = ADC1->DR;                // Read result, clears EOC flag
 80008e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <ADC_IRQHandler+0x3c>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	b29b      	uxth	r3, r3

        if (current_channel == 5)
 80008ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <ADC_IRQHandler+0x40>)
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	2a05      	cmp	r2, #5
 80008f0:	d007      	beq.n	8000902 <ADC_IRQHandler+0x2a>
            current_channel = 6;
            ADC1_Start(6);                        // Next: PA6
        }
        else
        {
            pot1_value = value;
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <ADC_IRQHandler+0x44>)
 80008f4:	8013      	strh	r3, [r2, #0]
            current_channel = 5; 
 80008f6:	2005      	movs	r0, #5
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <ADC_IRQHandler+0x40>)
 80008fa:	7018      	strb	r0, [r3, #0]
            ADC1_Start(5);                        // Next: PA5
 80008fc:	f7ff ffd8 	bl	80008b0 <ADC1_Start>
        }
    }
}
 8000900:	bd08      	pop	{r3, pc}
            pot0_value = value;
 8000902:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <ADC_IRQHandler+0x48>)
 8000904:	8013      	strh	r3, [r2, #0]
            current_channel = 6;
 8000906:	2006      	movs	r0, #6
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <ADC_IRQHandler+0x40>)
 800090a:	7018      	strb	r0, [r3, #0]
            ADC1_Start(6);                        // Next: PA6
 800090c:	f7ff ffd0 	bl	80008b0 <ADC1_Start>
 8000910:	e7f6      	b.n	8000900 <ADC_IRQHandler+0x28>
 8000912:	bf00      	nop
 8000914:	40012000 	.word	0x40012000
 8000918:	20000000 	.word	0x20000000
 800091c:	200000c2 	.word	0x200000c2
 8000920:	200000c4 	.word	0x200000c4

08000924 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000924:	b508      	push	{r3, lr}
    if (huart->Instance == USART1)
 8000926:	6802      	ldr	r2, [r0, #0]
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_UART_RxCpltCallback+0x4c>)
 800092a:	429a      	cmp	r2, r3
 800092c:	d000      	beq.n	8000930 <HAL_UART_RxCpltCallback+0xc>
        }

        // Receive next byte
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}
 800092e:	bd08      	pop	{r3, pc}
        if (rxByte == '\n' || rxByte == '\r')
 8000930:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_UART_RxCpltCallback+0x50>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b0a      	cmp	r3, #10
 8000936:	d00b      	beq.n	8000950 <HAL_UART_RxCpltCallback+0x2c>
 8000938:	2b0d      	cmp	r3, #13
 800093a:	d009      	beq.n	8000950 <HAL_UART_RxCpltCallback+0x2c>
            if (rxIndex < RX_SIZE - 1)
 800093c:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800093e:	7812      	ldrb	r2, [r2, #0]
 8000940:	2a30      	cmp	r2, #48	@ 0x30
 8000942:	d80e      	bhi.n	8000962 <HAL_UART_RxCpltCallback+0x3e>
                rxBuffer[rxIndex++] = rxByte;
 8000944:	1c50      	adds	r0, r2, #1
 8000946:	490c      	ldr	r1, [pc, #48]	@ (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000948:	7008      	strb	r0, [r1, #0]
 800094a:	490c      	ldr	r1, [pc, #48]	@ (800097c <HAL_UART_RxCpltCallback+0x58>)
 800094c:	548b      	strb	r3, [r1, r2]
 800094e:	e008      	b.n	8000962 <HAL_UART_RxCpltCallback+0x3e>
            rxBuffer[rxIndex] = '\0';
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000952:	7819      	ldrb	r1, [r3, #0]
 8000954:	2200      	movs	r2, #0
 8000956:	4809      	ldr	r0, [pc, #36]	@ (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000958:	5442      	strb	r2, [r0, r1]
            rxIndex = 0;
 800095a:	701a      	strb	r2, [r3, #0]
            stringReady = 1;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_UART_RxCpltCallback+0x5c>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	4903      	ldr	r1, [pc, #12]	@ (8000974 <HAL_UART_RxCpltCallback+0x50>)
 8000966:	4807      	ldr	r0, [pc, #28]	@ (8000984 <HAL_UART_RxCpltCallback+0x60>)
 8000968:	f001 fbcb 	bl	8002102 <HAL_UART_Receive_IT>
}
 800096c:	e7df      	b.n	800092e <HAL_UART_RxCpltCallback+0xa>
 800096e:	bf00      	nop
 8000970:	40011000 	.word	0x40011000
 8000974:	20000089 	.word	0x20000089
 8000978:	2000008a 	.word	0x2000008a
 800097c:	2000008c 	.word	0x2000008c
 8000980:	20000088 	.word	0x20000088
 8000984:	200000c8 	.word	0x200000c8

08000988 <ADC1_Init>:

void ADC1_Init(void)
{
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;           // Enable ADC1 clock
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <ADC1_Init+0x50>)
 800098a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800098c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000990:	6453      	str	r3, [r2, #68]	@ 0x44

    // ADC common prescaler (PCLK2 / 4)
    ADC->CCR &= ~(3U << 16);
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <ADC1_Init+0x54>)
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800099a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= (1U << 16);                       // Divide by 4
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80009a2:	605a      	str	r2, [r3, #4]

    ADC1->CR1 = 0;                                // 12-bit, single conversion
 80009a4:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = ADC_CR2_EOCS | ADC_CR2_CONT;      // EOC after each, continuous mode
 80009ac:	f240 4102 	movw	r1, #1026	@ 0x402
 80009b0:	6099      	str	r1, [r3, #8]
    ADC1->SQR1 = 0;                               // One conversion per sequence
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Sampling time for channels 5 and 6: 56 cycles (enough for stable reads)
    ADC1->SMPR2 |= (3U << (5 * 3)) | (3U << (6 * 3));
 80009b4:	691a      	ldr	r2, [r3, #16]
 80009b6:	f442 2258 	orr.w	r2, r2, #884736	@ 0xd8000
 80009ba:	611a      	str	r2, [r3, #16]

    // Enable EOC interrupt
    ADC1->CR1 |= ADC_CR1_EOCIE;
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	f042 0220 	orr.w	r2, r2, #32
 80009c2:	605a      	str	r2, [r3, #4]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c4:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <ADC1_Init+0x58>)
 80009c6:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 80009ca:	6011      	str	r1, [r2, #0]
    NVIC_EnableIRQ(ADC_IRQn);

    ADC1->CR2 |= ADC_CR2_ADON;                    // Power on ADC
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	609a      	str	r2, [r3, #8]
}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40012300 	.word	0x40012300
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <Error_Handler+0x2>

080009e8 <UART1_Init>:
{
 80009e8:	b530      	push	{r4, r5, lr}
 80009ea:	b089      	sub	sp, #36	@ 0x24
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ec:	2400      	movs	r4, #0
 80009ee:	9401      	str	r4, [sp, #4]
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <UART1_Init+0x84>)
 80009f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009f4:	f042 0210 	orr.w	r2, r2, #16
 80009f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80009fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009fc:	f002 0210 	and.w	r2, r2, #16
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	9402      	str	r4, [sp, #8]
 8000a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a08:	f042 0201 	orr.w	r2, r2, #1
 8000a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	a903      	add	r1, sp, #12
 8000a1a:	9403      	str	r4, [sp, #12]
 8000a1c:	604c      	str	r4, [r1, #4]
 8000a1e:	608c      	str	r4, [r1, #8]
 8000a20:	60cc      	str	r4, [r1, #12]
 8000a22:	610c      	str	r4, [r1, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000a24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a32:	2307      	movs	r3, #7
 8000a34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	480e      	ldr	r0, [pc, #56]	@ (8000a70 <UART1_Init+0x88>)
 8000a38:	f000 fb04 	bl	8001044 <HAL_GPIO_Init>
    huart1.Instance = USART1;
 8000a3c:	4d0d      	ldr	r5, [pc, #52]	@ (8000a74 <UART1_Init+0x8c>)
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <UART1_Init+0x90>)
 8000a40:	602b      	str	r3, [r5, #0]
    huart1.Init.BaudRate = 115200;
 8000a42:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000a46:	606b      	str	r3, [r5, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a48:	60ac      	str	r4, [r5, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4a:	60ec      	str	r4, [r5, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000a4c:	612c      	str	r4, [r5, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	616b      	str	r3, [r5, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	61ac      	str	r4, [r5, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	61ec      	str	r4, [r5, #28]
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a56:	2025      	movs	r0, #37	@ 0x25
 8000a58:	f000 f992 	bl	8000d80 <HAL_NVIC_EnableIRQ>
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	f001 f8c7 	bl	8001bf0 <HAL_UART_Init>
 8000a62:	b908      	cbnz	r0, 8000a68 <UART1_Init+0x80>
}
 8000a64:	b009      	add	sp, #36	@ 0x24
 8000a66:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 8000a68:	f7ff ffbc 	bl	80009e4 <Error_Handler>
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	200000c8 	.word	0x200000c8
 8000a78:	40011000 	.word	0x40011000

08000a7c <SystemClock_Config>:
{
 8000a7c:	b510      	push	{r4, lr}
 8000a7e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a80:	ac07      	add	r4, sp, #28
 8000a82:	2234      	movs	r2, #52	@ 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4620      	mov	r0, r4
 8000a88:	f001 fbdc 	bl	8002244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	9303      	str	r3, [sp, #12]
 8000a92:	9304      	str	r3, [sp, #16]
 8000a94:	9305      	str	r3, [sp, #20]
 8000a96:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <SystemClock_Config+0x84>)
 8000a9c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000a9e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000aa2:	6411      	str	r1, [r2, #64]	@ 0x40
 8000aa4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000aa6:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	4914      	ldr	r1, [pc, #80]	@ (8000b04 <SystemClock_Config+0x88>)
 8000ab2:	680a      	ldr	r2, [r1, #0]
 8000ab4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000ab8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000abc:	600a      	str	r2, [r1, #0]
 8000abe:	680a      	ldr	r2, [r1, #0]
 8000ac0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000ac4:	9201      	str	r2, [sp, #4]
 8000ac6:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2202      	movs	r2, #2
 8000aca:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	2201      	movs	r2, #1
 8000ace:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f000 fd3e 	bl	8001558 <HAL_RCC_OscConfig>
 8000adc:	b960      	cbnz	r0, 8000af8 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aec:	a802      	add	r0, sp, #8
 8000aee:	f000 fbc9 	bl	8001284 <HAL_RCC_ClockConfig>
 8000af2:	b918      	cbnz	r0, 8000afc <SystemClock_Config+0x80>
}
 8000af4:	b014      	add	sp, #80	@ 0x50
 8000af6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000af8:	f7ff ff74 	bl	80009e4 <Error_Handler>
    Error_Handler();
 8000afc:	f7ff ff72 	bl	80009e4 <Error_Handler>
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <main>:
{
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	b084      	sub	sp, #16
  HAL_Init();
 8000b0c:	f000 f8a8 	bl	8000c60 <HAL_Init>
  SystemClock_Config();
 8000b10:	f7ff ffb4 	bl	8000a7c <SystemClock_Config>
  MX_GPIO_Init();
 8000b14:	f7ff fd68 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b18:	f7ff fe14 	bl	8000744 <MX_DMA_Init>
  UART1_Init();
 8000b1c:	f7ff ff64 	bl	80009e8 <UART1_Init>
  ADC1_Init();
 8000b20:	f7ff ff32 	bl	8000988 <ADC1_Init>
  ADC1_Start( 5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f7ff fec3 	bl	80008b0 <ADC1_Start>
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	492e      	ldr	r1, [pc, #184]	@ (8000be8 <main+0xe0>)
 8000b2e:	482f      	ldr	r0, [pc, #188]	@ (8000bec <main+0xe4>)
 8000b30:	f001 fae7 	bl	8002102 <HAL_UART_Receive_IT>
  init_LCD();
 8000b34:	f7ff fd20 	bl	8000578 <init_LCD>
  lcd_command(CLEAR);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fc95 	bl	8000468 <lcd_command>
 8000b3e:	e00f      	b.n	8000b60 <main+0x58>
    if ( abs(pot1_value - old_pot1_value) > 30){
 8000b40:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <main+0xe8>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf4 <main+0xec>)
 8000b48:	8812      	ldrh	r2, [r2, #0]
 8000b4a:	b292      	uxth	r2, r2
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bfb8      	it	lt
 8000b52:	425b      	neglt	r3, r3
 8000b54:	2b1e      	cmp	r3, #30
 8000b56:	dc26      	bgt.n	8000ba6 <main+0x9e>
    if (stringReady)
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <main+0xf0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d139      	bne.n	8000bd4 <main+0xcc>
    if ( abs(pot0_value - old_pot0_value) > 30){
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <main+0xf4>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4a26      	ldr	r2, [pc, #152]	@ (8000c00 <main+0xf8>)
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	b292      	uxth	r2, r2
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b1e      	cmp	r3, #30
 8000b76:	dde3      	ble.n	8000b40 <main+0x38>
        old_pot0_value = pot0_value;
 8000b78:	4a20      	ldr	r2, [pc, #128]	@ (8000bfc <main+0xf4>)
 8000b7a:	8813      	ldrh	r3, [r2, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4920      	ldr	r1, [pc, #128]	@ (8000c00 <main+0xf8>)
 8000b80:	800b      	strh	r3, [r1, #0]
        sprintf(buf, "POT0 %4u\r\n", pot0_value);
 8000b82:	8812      	ldrh	r2, [r2, #0]
 8000b84:	ac01      	add	r4, sp, #4
 8000b86:	b292      	uxth	r2, r2
 8000b88:	491e      	ldr	r1, [pc, #120]	@ (8000c04 <main+0xfc>)
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f001 fb38 	bl	8002200 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f7ff fb1d 	bl	80001d0 <strlen>
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	b282      	uxth	r2, r0
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	4813      	ldr	r0, [pc, #76]	@ (8000bec <main+0xe4>)
 8000ba0:	f001 f856 	bl	8001c50 <HAL_UART_Transmit>
 8000ba4:	e7cc      	b.n	8000b40 <main+0x38>
        old_pot1_value = pot1_value;
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <main+0xe8>)
 8000ba8:	8813      	ldrh	r3, [r2, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	4911      	ldr	r1, [pc, #68]	@ (8000bf4 <main+0xec>)
 8000bae:	800b      	strh	r3, [r1, #0]
        sprintf(buf, "POT1 %4u\r\n",pot1_value);
 8000bb0:	8812      	ldrh	r2, [r2, #0]
 8000bb2:	ac01      	add	r4, sp, #4
 8000bb4:	b292      	uxth	r2, r2
 8000bb6:	4914      	ldr	r1, [pc, #80]	@ (8000c08 <main+0x100>)
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f001 fb21 	bl	8002200 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f7ff fb06 	bl	80001d0 <strlen>
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	b282      	uxth	r2, r0
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4807      	ldr	r0, [pc, #28]	@ (8000bec <main+0xe4>)
 8000bce:	f001 f83f 	bl	8001c50 <HAL_UART_Transmit>
 8000bd2:	e7c1      	b.n	8000b58 <main+0x50>
            stringReady = 0; 
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <main+0xf0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
            GPIOB->ODR = 23;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <main+0x104>)
 8000bdc:	2217      	movs	r2, #23
 8000bde:	615a      	str	r2, [r3, #20]
            lcd_putstring(Recieved);
 8000be0:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <main+0x108>)
 8000be2:	f7ff fc35 	bl	8000450 <lcd_putstring>
            handle(Recieved);
 8000be6:	e7bb      	b.n	8000b60 <main+0x58>
 8000be8:	20000089 	.word	0x20000089
 8000bec:	200000c8 	.word	0x200000c8
 8000bf0:	200000c2 	.word	0x200000c2
 8000bf4:	200000be 	.word	0x200000be
 8000bf8:	20000088 	.word	0x20000088
 8000bfc:	200000c4 	.word	0x200000c4
 8000c00:	200000c0 	.word	0x200000c0
 8000c04:	08002e7c 	.word	0x08002e7c
 8000c08:	08002e88 	.word	0x08002e88
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_InitTick+0x40>)
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <HAL_InitTick+0x44>)
 8000c26:	6810      	ldr	r0, [r2, #0]
 8000c28:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c2c:	f000 f8ac 	bl	8000d88 <HAL_SYSTICK_Config>
 8000c30:	b968      	cbnz	r0, 8000c4e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	2c0f      	cmp	r4, #15
 8000c34:	d901      	bls.n	8000c3a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
 8000c38:	e00a      	b.n	8000c50 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f000 f88d 	bl	8000d60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <HAL_InitTick+0x48>)
 8000c48:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
}
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	bf00      	nop
 8000c54:	20000001 	.word	0x20000001
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_Init>:
{
 8000c60:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_Init+0x30>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c7a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f85d 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff ffc6 	bl	8000c14 <HAL_InitTick>
  HAL_MspInit();
 8000c88:	f000 fae0 	bl	800124c <HAL_MspInit>
}
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	bd08      	pop	{r3, pc}
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c94:	4a03      	ldr	r2, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x10>)
 8000c96:	6811      	ldr	r1, [r2, #0]
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <HAL_IncTick+0x14>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000170 	.word	0x20000170
 8000ca8:	20000001 	.word	0x20000001

08000cac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cac:	4b01      	ldr	r3, [pc, #4]	@ (8000cb4 <HAL_GetTick+0x8>)
 8000cae:	6818      	ldr	r0, [r3, #0]
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000170 	.word	0x20000170

08000cb8 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	db07      	blt.n	8000ccc <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbc:	f000 021f 	and.w	r2, r0, #31
 8000cc0:	0940      	lsrs	r0, r0, #5
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	4a02      	ldr	r2, [pc, #8]	@ (8000cd0 <__NVIC_EnableIRQ+0x18>)
 8000cc8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	db08      	blt.n	8000cea <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	0109      	lsls	r1, r1, #4
 8000cda:	b2c9      	uxtb	r1, r1
 8000cdc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ce0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ce4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ce8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	f000 000f 	and.w	r0, r0, #15
 8000cee:	0109      	lsls	r1, r1, #4
 8000cf0:	b2c9      	uxtb	r1, r1
 8000cf2:	4b01      	ldr	r3, [pc, #4]	@ (8000cf8 <__NVIC_SetPriority+0x24>)
 8000cf4:	5419      	strb	r1, [r3, r0]
  }
}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed14 	.word	0xe000ed14

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d02:	f1c0 0c07 	rsb	ip, r0, #7
 8000d06:	f1bc 0f04 	cmp.w	ip, #4
 8000d0a:	bf28      	it	cs
 8000d0c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d10:	1d03      	adds	r3, r0, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d90f      	bls.n	8000d36 <NVIC_EncodePriority+0x3a>
 8000d16:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 3eff 	mov.w	lr, #4294967295
 8000d1c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000d20:	ea21 0100 	bic.w	r1, r1, r0
 8000d24:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d26:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d2a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000d2e:	ea41 0002 	orr.w	r0, r1, r2
 8000d32:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	2300      	movs	r3, #0
 8000d38:	e7ee      	b.n	8000d18 <NVIC_EncodePriority+0x1c>
	...

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d3e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d40:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d44:	041b      	lsls	r3, r3, #16
 8000d46:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	0200      	lsls	r0, r0, #8
 8000d4a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000d58:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_NVIC_SetPriority+0x1c>)
 8000d66:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d68:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000d6c:	f7ff ffc6 	bl	8000cfc <NVIC_EncodePriority>
 8000d70:	4601      	mov	r1, r0
 8000d72:	4620      	mov	r0, r4
 8000d74:	f7ff ffae 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f7ff ff99 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000d86:	bd08      	pop	{r3, pc}

08000d88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	3801      	subs	r0, #1
 8000d8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d8e:	d20b      	bcs.n	8000da8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d94:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <HAL_SYSTICK_Config+0x24>)
 8000d98:	21f0      	movs	r1, #240	@ 0xf0
 8000d9a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9e:	2000      	movs	r0, #0
 8000da0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	2207      	movs	r2, #7
 8000da4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000da8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000db4:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000db6:	f7ff ff79 	bl	8000cac <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dba:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d006      	beq.n	8000dd0 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
 8000dd0:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dd2:	6822      	ldr	r2, [r4, #0]
 8000dd4:	6813      	ldr	r3, [r2, #0]
 8000dd6:	f023 0316 	bic.w	r3, r3, #22
 8000dda:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	6953      	ldr	r3, [r2, #20]
 8000de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000de4:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000de6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000de8:	b1e3      	cbz	r3, 8000e24 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f023 0308 	bic.w	r3, r3, #8
 8000df2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000df4:	6822      	ldr	r2, [r4, #0]
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f013 0f01 	tst.w	r3, #1
 8000e06:	d011      	beq.n	8000e2c <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e08:	f7ff ff50 	bl	8000cac <HAL_GetTick>
 8000e0c:	1b43      	subs	r3, r0, r5
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d9f5      	bls.n	8000dfe <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e12:	2320      	movs	r3, #32
 8000e14:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e16:	2003      	movs	r0, #3
 8000e18:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8000e22:	e7d4      	b.n	8000dce <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e24:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1df      	bne.n	8000dea <HAL_DMA_Abort+0x3a>
 8000e2a:	e7e3      	b.n	8000df4 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000e2e:	233f      	movs	r3, #63	@ 0x3f
 8000e30:	4093      	lsls	r3, r2
 8000e32:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8000e40:	e7c5      	b.n	8000dce <HAL_DMA_Abort+0x1e>

08000e42 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d003      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e52:	2305      	movs	r3, #5
 8000e54:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e58:	6802      	ldr	r2, [r0, #0]
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000e62:	2000      	movs	r0, #0
}
 8000e64:	4770      	bx	lr
	...

08000e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e72:	4b72      	ldr	r3, [pc, #456]	@ (800103c <HAL_DMA_IRQHandler+0x1d4>)
 8000e74:	681d      	ldr	r5, [r3, #0]
 8000e76:	4b72      	ldr	r3, [pc, #456]	@ (8001040 <HAL_DMA_IRQHandler+0x1d8>)
 8000e78:	fba3 3505 	umull	r3, r5, r3, r5
 8000e7c:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e7e:	6d87      	ldr	r7, [r0, #88]	@ 0x58

  tmpisr = regs->ISR;
 8000e80:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e82:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000e84:	2308      	movs	r3, #8
 8000e86:	4093      	lsls	r3, r2
 8000e88:	4233      	tst	r3, r6
 8000e8a:	d010      	beq.n	8000eae <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e8c:	6803      	ldr	r3, [r0, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	f012 0f04 	tst.w	r2, #4
 8000e94:	d00b      	beq.n	8000eae <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f022 0204 	bic.w	r2, r2, #4
 8000e9c:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e9e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	4093      	lsls	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ea6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6543      	str	r3, [r0, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	4233      	tst	r3, r6
 8000eb6:	d009      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000eb8:	6822      	ldr	r2, [r4, #0]
 8000eba:	6952      	ldr	r2, [r2, #20]
 8000ebc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000ec0:	d004      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ec2:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ec4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ecc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000ece:	2304      	movs	r3, #4
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	4233      	tst	r3, r6
 8000ed4:	d009      	beq.n	8000eea <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	f012 0f02 	tst.w	r2, #2
 8000ede:	d004      	beq.n	8000eea <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ee0:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ee2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000eea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000eec:	2310      	movs	r3, #16
 8000eee:	4093      	lsls	r3, r2
 8000ef0:	4233      	tst	r3, r6
 8000ef2:	d024      	beq.n	8000f3e <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	f012 0f08 	tst.w	r2, #8
 8000efc:	d01f      	beq.n	8000f3e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000efe:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000f08:	d00d      	beq.n	8000f26 <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000f10:	d104      	bne.n	8000f1c <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f14:	b19b      	cbz	r3, 8000f3e <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f16:	4620      	mov	r0, r4
 8000f18:	4798      	blx	r3
 8000f1a:	e010      	b.n	8000f3e <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f1c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000f1e:	b173      	cbz	r3, 8000f3e <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f20:	4620      	mov	r0, r4
 8000f22:	4798      	blx	r3
 8000f24:	e00b      	b.n	8000f3e <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000f2c:	d103      	bne.n	8000f36 <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f38:	b10b      	cbz	r3, 8000f3e <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f3e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f40:	2320      	movs	r3, #32
 8000f42:	4093      	lsls	r3, r2
 8000f44:	4233      	tst	r3, r6
 8000f46:	d054      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x18a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	f012 0f10 	tst.w	r2, #16
 8000f50:	d04f      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x18a>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f52:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f54:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d00e      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x112>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000f64:	d033      	beq.n	8000fce <HAL_DMA_IRQHandler+0x166>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000f6c:	d12a      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0x15c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000f6e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d03e      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000f74:	4620      	mov	r0, r4
 8000f76:	4798      	blx	r3
 8000f78:	e03b      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f7a:	6822      	ldr	r2, [r4, #0]
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	f023 0316 	bic.w	r3, r3, #22
 8000f82:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f84:	6822      	ldr	r2, [r4, #0]
 8000f86:	6953      	ldr	r3, [r2, #20]
 8000f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f8c:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f90:	b1a3      	cbz	r3, 8000fbc <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f92:	6822      	ldr	r2, [r4, #0]
 8000f94:	6813      	ldr	r3, [r2, #0]
 8000f96:	f023 0308 	bic.w	r3, r3, #8
 8000f9a:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f9c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f9e:	233f      	movs	r3, #63	@ 0x3f
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000faa:	2300      	movs	r3, #0
 8000fac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000fb0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d03f      	beq.n	8001036 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4798      	blx	r3
        return;
 8000fba:	e03c      	b.n	8001036 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fbc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1e7      	bne.n	8000f92 <HAL_DMA_IRQHandler+0x12a>
 8000fc2:	e7eb      	b.n	8000f9c <HAL_DMA_IRQHandler+0x134>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000fc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000fc6:	b1a3      	cbz	r3, 8000ff2 <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4798      	blx	r3
 8000fcc:	e011      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x18a>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000fd4:	d109      	bne.n	8000fea <HAL_DMA_IRQHandler+0x182>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	f022 0210 	bic.w	r2, r2, #16
 8000fdc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000fea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000fec:	b10b      	cbz	r3, 8000ff2 <HAL_DMA_IRQHandler+0x18a>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000fee:	4620      	mov	r0, r4
 8000ff0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ff2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ff4:	b1fb      	cbz	r3, 8001036 <HAL_DMA_IRQHandler+0x1ce>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ff6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ff8:	f013 0f01 	tst.w	r3, #1
 8000ffc:	d017      	beq.n	800102e <HAL_DMA_IRQHandler+0x1c6>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ffe:	2305      	movs	r3, #5
 8001000:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001004:	6822      	ldr	r2, [r4, #0]
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 800100e:	9b01      	ldr	r3, [sp, #4]
 8001010:	3301      	adds	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	42ab      	cmp	r3, r5
 8001016:	d804      	bhi.n	8001022 <HAL_DMA_IRQHandler+0x1ba>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f013 0f01 	tst.w	r3, #1
 8001020:	d1f5      	bne.n	800100e <HAL_DMA_IRQHandler+0x1a6>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001022:	2301      	movs	r3, #1
 8001024:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001028:	2300      	movs	r3, #0
 800102a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800102e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001030:	b10b      	cbz	r3, 8001036 <HAL_DMA_IRQHandler+0x1ce>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001032:	4620      	mov	r0, r4
 8001034:	4798      	blx	r3
    }
  }
}
 8001036:	b003      	add	sp, #12
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	1b4e81b5 	.word	0x1b4e81b5

08001044 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001044:	2300      	movs	r3, #0
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f200 80e3 	bhi.w	8001212 <HAL_GPIO_Init+0x1ce>
{
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	e065      	b.n	800111e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001052:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001058:	2403      	movs	r4, #3
 800105a:	fa04 f40e 	lsl.w	r4, r4, lr
 800105e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	68cc      	ldr	r4, [r1, #12]
 8001064:	fa04 f40e 	lsl.w	r4, r4, lr
 8001068:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800106a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001072:	684a      	ldr	r2, [r1, #4]
 8001074:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800107c:	6042      	str	r2, [r0, #4]
 800107e:	e05c      	b.n	800113a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001080:	08dc      	lsrs	r4, r3, #3
 8001082:	3408      	adds	r4, #8
 8001084:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001088:	f003 0507 	and.w	r5, r3, #7
 800108c:	00ad      	lsls	r5, r5, #2
 800108e:	f04f 0e0f 	mov.w	lr, #15
 8001092:	fa0e fe05 	lsl.w	lr, lr, r5
 8001096:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109a:	690a      	ldr	r2, [r1, #16]
 800109c:	40aa      	lsls	r2, r5
 800109e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80010a6:	e05c      	b.n	8001162 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a8:	2206      	movs	r2, #6
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x6a>
 80010ac:	2200      	movs	r2, #0
 80010ae:	fa02 f20e 	lsl.w	r2, r2, lr
 80010b2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	3402      	adds	r4, #2
 80010b6:	4d57      	ldr	r5, [pc, #348]	@ (8001214 <HAL_GPIO_Init+0x1d0>)
 80010b8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010bc:	4a56      	ldr	r2, [pc, #344]	@ (8001218 <HAL_GPIO_Init+0x1d4>)
 80010be:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	ea6f 020c 	mvn.w	r2, ip
 80010c4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c8:	684e      	ldr	r6, [r1, #4]
 80010ca:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80010ce:	d001      	beq.n	80010d4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80010d0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80010d4:	4c50      	ldr	r4, [pc, #320]	@ (8001218 <HAL_GPIO_Init+0x1d4>)
 80010d6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80010d8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80010da:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010de:	684e      	ldr	r6, [r1, #4]
 80010e0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80010e4:	d001      	beq.n	80010ea <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80010e6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80010ea:	4c4b      	ldr	r4, [pc, #300]	@ (8001218 <HAL_GPIO_Init+0x1d4>)
 80010ec:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80010ee:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f4:	684e      	ldr	r6, [r1, #4]
 80010f6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80010fa:	d001      	beq.n	8001100 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80010fc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001100:	4c45      	ldr	r4, [pc, #276]	@ (8001218 <HAL_GPIO_Init+0x1d4>)
 8001102:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001106:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001108:	684d      	ldr	r5, [r1, #4]
 800110a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800110e:	d001      	beq.n	8001114 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001110:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001114:	4c40      	ldr	r4, [pc, #256]	@ (8001218 <HAL_GPIO_Init+0x1d4>)
 8001116:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001118:	3301      	adds	r3, #1
 800111a:	2b0f      	cmp	r3, #15
 800111c:	d877      	bhi.n	800120e <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800111e:	2201      	movs	r2, #1
 8001120:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	680c      	ldr	r4, [r1, #0]
 8001124:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001128:	ea32 0404 	bics.w	r4, r2, r4
 800112c:	d1f4      	bne.n	8001118 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	684c      	ldr	r4, [r1, #4]
 8001130:	f004 0403 	and.w	r4, r4, #3
 8001134:	3c01      	subs	r4, #1
 8001136:	2c01      	cmp	r4, #1
 8001138:	d98b      	bls.n	8001052 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	684a      	ldr	r2, [r1, #4]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	2a03      	cmp	r2, #3
 8001142:	d009      	beq.n	8001158 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001144:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	005d      	lsls	r5, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	40aa      	lsls	r2, r5
 800114c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	688a      	ldr	r2, [r1, #8]
 8001152:	40aa      	lsls	r2, r5
 8001154:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001156:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	684a      	ldr	r2, [r1, #4]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	2a02      	cmp	r2, #2
 8001160:	d08e      	beq.n	8001080 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001162:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001164:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f20e 	lsl.w	r2, r2, lr
 800116e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001172:	684a      	ldr	r2, [r1, #4]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	fa02 f20e 	lsl.w	r2, r2, lr
 800117c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800117e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	684a      	ldr	r2, [r1, #4]
 8001182:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001186:	d0c7      	beq.n	8001118 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	4a23      	ldr	r2, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x1d8>)
 800118e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001190:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001194:	6454      	str	r4, [r2, #68]	@ 0x44
 8001196:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001198:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800119c:	9201      	str	r2, [sp, #4]
 800119e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	089c      	lsrs	r4, r3, #2
 80011a2:	1ca5      	adds	r5, r4, #2
 80011a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <HAL_GPIO_Init+0x1d0>)
 80011a6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011aa:	f003 0e03 	and.w	lr, r3, #3
 80011ae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f20e 	lsl.w	r2, r2, lr
 80011b8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011bc:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <HAL_GPIO_Init+0x1dc>)
 80011be:	4290      	cmp	r0, r2
 80011c0:	f43f af74 	beq.w	80010ac <HAL_GPIO_Init+0x68>
 80011c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d016      	beq.n	80011fa <HAL_GPIO_Init+0x1b6>
 80011cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d014      	beq.n	80011fe <HAL_GPIO_Init+0x1ba>
 80011d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011d8:	4290      	cmp	r0, r2
 80011da:	d012      	beq.n	8001202 <HAL_GPIO_Init+0x1be>
 80011dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011e0:	4290      	cmp	r0, r2
 80011e2:	d010      	beq.n	8001206 <HAL_GPIO_Init+0x1c2>
 80011e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011e8:	4290      	cmp	r0, r2
 80011ea:	d00e      	beq.n	800120a <HAL_GPIO_Init+0x1c6>
 80011ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011f0:	4290      	cmp	r0, r2
 80011f2:	f43f af59 	beq.w	80010a8 <HAL_GPIO_Init+0x64>
 80011f6:	2207      	movs	r2, #7
 80011f8:	e759      	b.n	80010ae <HAL_GPIO_Init+0x6a>
 80011fa:	2201      	movs	r2, #1
 80011fc:	e757      	b.n	80010ae <HAL_GPIO_Init+0x6a>
 80011fe:	2202      	movs	r2, #2
 8001200:	e755      	b.n	80010ae <HAL_GPIO_Init+0x6a>
 8001202:	2203      	movs	r2, #3
 8001204:	e753      	b.n	80010ae <HAL_GPIO_Init+0x6a>
 8001206:	2204      	movs	r2, #4
 8001208:	e751      	b.n	80010ae <HAL_GPIO_Init+0x6a>
 800120a:	2205      	movs	r2, #5
 800120c:	e74f      	b.n	80010ae <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800120e:	b002      	add	sp, #8
 8001210:	bd70      	pop	{r4, r5, r6, pc}
 8001212:	4770      	bx	lr
 8001214:	40013800 	.word	0x40013800
 8001218:	40013c00 	.word	0x40013c00
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	b10a      	cbz	r2, 800122a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	6181      	str	r1, [r0, #24]
 8001228:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	0409      	lsls	r1, r1, #16
 800122c:	6181      	str	r1, [r0, #24]
  }
}
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001230:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001232:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4203      	tst	r3, r0
 8001238:	d100      	bne.n	800123c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800123a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800123c:	4b02      	ldr	r3, [pc, #8]	@ (8001248 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800123e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001240:	f7ff faae 	bl	80007a0 <HAL_GPIO_EXTI_Callback>
}
 8001244:	e7f9      	b.n	800123a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001246:	bf00      	nop
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2100      	movs	r1, #0
 8001250:	9100      	str	r1, [sp, #0]
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_MspInit+0x34>)
 8001254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
 800125c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800125e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	9101      	str	r1, [sp, #4]
 8001268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800126a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800126e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	b002      	add	sp, #8
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001284:	2800      	cmp	r0, #0
 8001286:	f000 809b 	beq.w	80013c0 <HAL_RCC_ClockConfig+0x13c>
{
 800128a:	b570      	push	{r4, r5, r6, lr}
 800128c:	460d      	mov	r5, r1
 800128e:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b4f      	ldr	r3, [pc, #316]	@ (80013d0 <HAL_RCC_ClockConfig+0x14c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	428b      	cmp	r3, r1
 800129a:	d208      	bcs.n	80012ae <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129c:	b2cb      	uxtb	r3, r1
 800129e:	4a4c      	ldr	r2, [pc, #304]	@ (80013d0 <HAL_RCC_ClockConfig+0x14c>)
 80012a0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a2:	6813      	ldr	r3, [r2, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	428b      	cmp	r3, r1
 80012aa:	f040 808b 	bne.w	80013c4 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f013 0f02 	tst.w	r3, #2
 80012b4:	d017      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b6:	f013 0f04 	tst.w	r3, #4
 80012ba:	d004      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012bc:	4a45      	ldr	r2, [pc, #276]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 80012be:	6893      	ldr	r3, [r2, #8]
 80012c0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012c4:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f013 0f08 	tst.w	r3, #8
 80012cc:	d004      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ce:	4a41      	ldr	r2, [pc, #260]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 80012d0:	6893      	ldr	r3, [r2, #8]
 80012d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d8:	4a3e      	ldr	r2, [pc, #248]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 80012da:	6893      	ldr	r3, [r2, #8]
 80012dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012e0:	68a1      	ldr	r1, [r4, #8]
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	f013 0f01 	tst.w	r3, #1
 80012ec:	d032      	beq.n	8001354 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	6863      	ldr	r3, [r4, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d021      	beq.n	8001338 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f4:	1e9a      	subs	r2, r3, #2
 80012f6:	2a01      	cmp	r2, #1
 80012f8:	d925      	bls.n	8001346 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	4a36      	ldr	r2, [pc, #216]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f012 0f02 	tst.w	r2, #2
 8001302:	d061      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001304:	4933      	ldr	r1, [pc, #204]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 8001306:	688a      	ldr	r2, [r1, #8]
 8001308:	f022 0203 	bic.w	r2, r2, #3
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fccc 	bl	8000cac <HAL_GetTick>
 8001314:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	6862      	ldr	r2, [r4, #4]
 8001320:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001324:	d016      	beq.n	8001354 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001326:	f7ff fcc1 	bl	8000cac <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001330:	4298      	cmp	r0, r3
 8001332:	d9f0      	bls.n	8001316 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
 8001336:	e042      	b.n	80013be <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001338:	4a26      	ldr	r2, [pc, #152]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001340:	d1e0      	bne.n	8001304 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	e03b      	b.n	80013be <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800134e:	d1d9      	bne.n	8001304 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001350:	2001      	movs	r0, #1
 8001352:	e034      	b.n	80013be <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <HAL_RCC_ClockConfig+0x14c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	42ab      	cmp	r3, r5
 800135e:	d907      	bls.n	8001370 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001360:	b2ea      	uxtb	r2, r5
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_ClockConfig+0x14c>)
 8001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	42ab      	cmp	r3, r5
 800136e:	d12d      	bne.n	80013cc <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f013 0f04 	tst.w	r3, #4
 8001376:	d006      	beq.n	8001386 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 800137a:	6893      	ldr	r3, [r2, #8]
 800137c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001380:	68e1      	ldr	r1, [r4, #12]
 8001382:	430b      	orrs	r3, r1
 8001384:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	f013 0f08 	tst.w	r3, #8
 800138c:	d007      	beq.n	800139e <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 8001390:	6893      	ldr	r3, [r2, #8]
 8001392:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001396:	6921      	ldr	r1, [r4, #16]
 8001398:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800139c:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139e:	f000 f847 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_RCC_ClockConfig+0x150>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_RCC_ClockConfig+0x154>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	40d8      	lsrs	r0, r3
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_RCC_ClockConfig+0x158>)
 80013b2:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_RCC_ClockConfig+0x15c>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f7ff fc2c 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 80013bc:	2000      	movs	r0, #0
}
 80013be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
}
 80013c2:	4770      	bx	lr
      return HAL_ERROR;
 80013c4:	2001      	movs	r0, #1
 80013c6:	e7fa      	b.n	80013be <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
 80013ca:	e7f8      	b.n	80013be <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e7f6      	b.n	80013be <HAL_RCC_ClockConfig+0x13a>
 80013d0:	40023c00 	.word	0x40023c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	08002e9c 	.word	0x08002e9c
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013e4:	4b01      	ldr	r3, [pc, #4]	@ (80013ec <HAL_RCC_GetHCLKFreq+0x8>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008

080013f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013f2:	f7ff fff7 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80013fe:	4a03      	ldr	r2, [pc, #12]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
}
 8001402:	40d8      	lsrs	r0, r3
 8001404:	bd08      	pop	{r3, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	08002e94 	.word	0x08002e94

08001410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001410:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001412:	f7ff ffe7 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800141e:	4a03      	ldr	r2, [pc, #12]	@ (800142c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
}
 8001422:	40d8      	lsrs	r0, r3
 8001424:	bd08      	pop	{r3, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	08002e94 	.word	0x08002e94

08001430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001432:	4b46      	ldr	r3, [pc, #280]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d005      	beq.n	800144a <HAL_RCC_GetSysClockFreq+0x1a>
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d043      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x9a>
 8001442:	2b04      	cmp	r3, #4
 8001444:	d17f      	bne.n	8001546 <HAL_RCC_GetSysClockFreq+0x116>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001446:	4842      	ldr	r0, [pc, #264]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x120>)
 8001448:	e019      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x4e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144a:	4b40      	ldr	r3, [pc, #256]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001458:	d012      	beq.n	8001480 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145a:	4b3c      	ldr	r3, [pc, #240]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001462:	483b      	ldr	r0, [pc, #236]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x120>)
 8001464:	2300      	movs	r3, #0
 8001466:	fba1 0100 	umull	r0, r1, r1, r0
 800146a:	f7fe ff09 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800146e:	4b37      	ldr	r3, [pc, #220]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001476:	3301      	adds	r3, #1
 8001478:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800147a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800147e:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 8001482:	6858      	ldr	r0, [r3, #4]
 8001484:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001488:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800148c:	ebbc 0c00 	subs.w	ip, ip, r0
 8001490:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001494:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001498:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800149c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80014a0:	ebb1 010c 	subs.w	r1, r1, ip
 80014a4:	eb63 030e 	sbc.w	r3, r3, lr
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ae:	00c9      	lsls	r1, r1, #3
 80014b0:	eb11 0c00 	adds.w	ip, r1, r0
 80014b4:	f143 0300 	adc.w	r3, r3, #0
 80014b8:	0299      	lsls	r1, r3, #10
 80014ba:	2300      	movs	r3, #0
 80014bc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80014c0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80014c4:	f7fe fedc 	bl	8000280 <__aeabi_uldivmod>
 80014c8:	e7d1      	b.n	800146e <HAL_RCC_GetSysClockFreq+0x3e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80014d8:	d010      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014e2:	481b      	ldr	r0, [pc, #108]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x120>)
 80014e4:	2300      	movs	r3, #0
 80014e6:	fba1 0100 	umull	r0, r1, r1, r0
 80014ea:	f7fe fec9 	bl	8000280 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 80014f6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80014fa:	e7c0      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x4e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <HAL_RCC_GetSysClockFreq+0x11c>)
 80014fe:	6858      	ldr	r0, [r3, #4]
 8001500:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001504:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001508:	ebbc 0c00 	subs.w	ip, ip, r0
 800150c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001510:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001514:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001518:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800151c:	ebb1 010c 	subs.w	r1, r1, ip
 8001520:	eb63 030e 	sbc.w	r3, r3, lr
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800152a:	00c9      	lsls	r1, r1, #3
 800152c:	eb11 0c00 	adds.w	ip, r1, r0
 8001530:	f143 0300 	adc.w	r3, r3, #0
 8001534:	0299      	lsls	r1, r3, #10
 8001536:	2300      	movs	r3, #0
 8001538:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800153c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001540:	f7fe fe9e 	bl	8000280 <__aeabi_uldivmod>
 8001544:	e7d3      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0xbe>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001546:	4803      	ldr	r0, [pc, #12]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 8001548:	e799      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x4e>
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	017d7840 	.word	0x017d7840
 8001554:	00f42400 	.word	0x00f42400

08001558 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001558:	2800      	cmp	r0, #0
 800155a:	f000 8201 	beq.w	8001960 <HAL_RCC_OscConfig+0x408>
{
 800155e:	b570      	push	{r4, r5, r6, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001564:	6803      	ldr	r3, [r0, #0]
 8001566:	f013 0f01 	tst.w	r3, #1
 800156a:	d041      	beq.n	80015f0 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800156c:	4b99      	ldr	r3, [pc, #612]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b04      	cmp	r3, #4
 8001576:	d032      	beq.n	80015de <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001578:	4b96      	ldr	r3, [pc, #600]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001580:	2b08      	cmp	r3, #8
 8001582:	d027      	beq.n	80015d4 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001584:	4b93      	ldr	r3, [pc, #588]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d059      	beq.n	8001644 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001590:	6863      	ldr	r3, [r4, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001596:	d05b      	beq.n	8001650 <HAL_RCC_OscConfig+0xf8>
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800159c:	d05e      	beq.n	800165c <HAL_RCC_OscConfig+0x104>
 800159e:	4b8d      	ldr	r3, [pc, #564]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b0:	6863      	ldr	r3, [r4, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d05c      	beq.n	8001670 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb79 	bl	8000cac <HAL_GetTick>
 80015ba:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015bc:	4b85      	ldr	r3, [pc, #532]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015c4:	d114      	bne.n	80015f0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c6:	f7ff fb71 	bl	8000cac <HAL_GetTick>
 80015ca:	1b40      	subs	r0, r0, r5
 80015cc:	2864      	cmp	r0, #100	@ 0x64
 80015ce:	d9f5      	bls.n	80015bc <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
 80015d2:	e1cc      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015d4:	4b7f      	ldr	r3, [pc, #508]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80015dc:	d0d2      	beq.n	8001584 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b7d      	ldr	r3, [pc, #500]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015e6:	d003      	beq.n	80015f0 <HAL_RCC_OscConfig+0x98>
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 81ba 	beq.w	8001964 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	f013 0f02 	tst.w	r3, #2
 80015f6:	d060      	beq.n	80016ba <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015f8:	4b76      	ldr	r3, [pc, #472]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f013 0f0c 	tst.w	r3, #12
 8001600:	d04a      	beq.n	8001698 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001602:	4b74      	ldr	r3, [pc, #464]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
        || \
 800160a:	2b08      	cmp	r3, #8
 800160c:	d03f      	beq.n	800168e <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b71      	ldr	r3, [pc, #452]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d069      	beq.n	80016ee <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d075      	beq.n	800170c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b6d      	ldr	r3, [pc, #436]	@ (80017d8 <HAL_RCC_OscConfig+0x280>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fb41 	bl	8000cac <HAL_GetTick>
 800162a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4b69      	ldr	r3, [pc, #420]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f013 0f02 	tst.w	r3, #2
 8001634:	d161      	bne.n	80016fa <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fb39 	bl	8000cac <HAL_GetTick>
 800163a:	1b40      	subs	r0, r0, r5
 800163c:	2802      	cmp	r0, #2
 800163e:	d9f5      	bls.n	800162c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8001640:	2003      	movs	r0, #3
 8001642:	e194      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001644:	4b63      	ldr	r3, [pc, #396]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800164c:	d0a0      	beq.n	8001590 <HAL_RCC_OscConfig+0x38>
 800164e:	e7c6      	b.n	80015de <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	4a60      	ldr	r2, [pc, #384]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e7a9      	b.n	80015b0 <HAL_RCC_OscConfig+0x58>
 800165c:	4b5d      	ldr	r3, [pc, #372]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e79f      	b.n	80015b0 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001670:	f7ff fb1c 	bl	8000cac <HAL_GetTick>
 8001674:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b57      	ldr	r3, [pc, #348]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800167e:	d0b7      	beq.n	80015f0 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fb14 	bl	8000cac <HAL_GetTick>
 8001684:	1b40      	subs	r0, r0, r5
 8001686:	2864      	cmp	r0, #100	@ 0x64
 8001688:	d9f5      	bls.n	8001676 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800168a:	2003      	movs	r0, #3
 800168c:	e16f      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800168e:	4b51      	ldr	r3, [pc, #324]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001696:	d1ba      	bne.n	800160e <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001698:	4b4e      	ldr	r3, [pc, #312]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f013 0f02 	tst.w	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_OscConfig+0x152>
 80016a2:	68e3      	ldr	r3, [r4, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	f040 815f 	bne.w	8001968 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4a4a      	ldr	r2, [pc, #296]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016b2:	6921      	ldr	r1, [r4, #16]
 80016b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016b8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	f013 0f08 	tst.w	r3, #8
 80016c0:	d049      	beq.n	8001756 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016c2:	6963      	ldr	r3, [r4, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d033      	beq.n	8001730 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c8:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <HAL_RCC_OscConfig+0x280>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff faec 	bl	8000cac <HAL_GetTick>
 80016d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016da:	f013 0f02 	tst.w	r3, #2
 80016de:	d13a      	bne.n	8001756 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fae4 	bl	8000cac <HAL_GetTick>
 80016e4:	1b40      	subs	r0, r0, r5
 80016e6:	2802      	cmp	r0, #2
 80016e8:	d9f5      	bls.n	80016d6 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80016ea:	2003      	movs	r0, #3
 80016ec:	e13f      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80016f6:	d190      	bne.n	800161a <HAL_RCC_OscConfig+0xc2>
 80016f8:	e7ce      	b.n	8001698 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4a36      	ldr	r2, [pc, #216]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001702:	6921      	ldr	r1, [r4, #16]
 8001704:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e7d6      	b.n	80016ba <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800170c:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <HAL_RCC_OscConfig+0x280>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001712:	f7ff facb 	bl	8000cac <HAL_GetTick>
 8001716:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001718:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f013 0f02 	tst.w	r3, #2
 8001720:	d0cb      	beq.n	80016ba <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fac3 	bl	8000cac <HAL_GetTick>
 8001726:	1b40      	subs	r0, r0, r5
 8001728:	2802      	cmp	r0, #2
 800172a:	d9f5      	bls.n	8001718 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 800172c:	2003      	movs	r0, #3
 800172e:	e11e      	b.n	800196e <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001730:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <HAL_RCC_OscConfig+0x280>)
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fab8 	bl	8000cac <HAL_GetTick>
 800173c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001742:	f013 0f02 	tst.w	r3, #2
 8001746:	d006      	beq.n	8001756 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fab0 	bl	8000cac <HAL_GetTick>
 800174c:	1b40      	subs	r0, r0, r5
 800174e:	2802      	cmp	r0, #2
 8001750:	d9f5      	bls.n	800173e <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8001752:	2003      	movs	r0, #3
 8001754:	e10b      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	f013 0f04 	tst.w	r3, #4
 800175c:	d076      	beq.n	800184c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001766:	d133      	bne.n	80017d0 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800176e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001770:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001780:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_RCC_OscConfig+0x284>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800178a:	d029      	beq.n	80017e0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	68a3      	ldr	r3, [r4, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d03a      	beq.n	8001808 <HAL_RCC_OscConfig+0x2b0>
 8001792:	2b05      	cmp	r3, #5
 8001794:	d03e      	beq.n	8001814 <HAL_RCC_OscConfig+0x2bc>
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 8001798:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	671a      	str	r2, [r3, #112]	@ 0x70
 80017a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017a2:	f022 0204 	bic.w	r2, r2, #4
 80017a6:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a8:	68a3      	ldr	r3, [r4, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03c      	beq.n	8001828 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fa7d 	bl	8000cac <HAL_GetTick>
 80017b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	f013 0f02 	tst.w	r3, #2
 80017bc:	d145      	bne.n	800184a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fa75 	bl	8000cac <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017c8:	4298      	cmp	r0, r3
 80017ca:	d9f3      	bls.n	80017b4 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 80017cc:	2003      	movs	r0, #3
 80017ce:	e0ce      	b.n	800196e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80017d0:	2500      	movs	r5, #0
 80017d2:	e7d6      	b.n	8001782 <HAL_RCC_OscConfig+0x22a>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	42470000 	.word	0x42470000
 80017dc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001990 <HAL_RCC_OscConfig+0x438>)
 80017e2:	6813      	ldr	r3, [r2, #0]
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80017ea:	f7ff fa5f 	bl	8000cac <HAL_GetTick>
 80017ee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	4b67      	ldr	r3, [pc, #412]	@ (8001990 <HAL_RCC_OscConfig+0x438>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80017f8:	d1c8      	bne.n	800178c <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fa:	f7ff fa57 	bl	8000cac <HAL_GetTick>
 80017fe:	1b80      	subs	r0, r0, r6
 8001800:	2802      	cmp	r0, #2
 8001802:	d9f5      	bls.n	80017f0 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8001804:	2003      	movs	r0, #3
 8001806:	e0b2      	b.n	800196e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	4a62      	ldr	r2, [pc, #392]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 800180a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	@ 0x70
 8001812:	e7c9      	b.n	80017a8 <HAL_RCC_OscConfig+0x250>
 8001814:	4b5f      	ldr	r3, [pc, #380]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 8001816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001818:	f042 0204 	orr.w	r2, r2, #4
 800181c:	671a      	str	r2, [r3, #112]	@ 0x70
 800181e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	671a      	str	r2, [r3, #112]	@ 0x70
 8001826:	e7bf      	b.n	80017a8 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fa40 	bl	8000cac <HAL_GetTick>
 800182c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	4b59      	ldr	r3, [pc, #356]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001832:	f013 0f02 	tst.w	r3, #2
 8001836:	d008      	beq.n	800184a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff fa38 	bl	8000cac <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001842:	4298      	cmp	r0, r3
 8001844:	d9f3      	bls.n	800182e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001846:	2003      	movs	r0, #3
 8001848:	e091      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800184a:	b9ed      	cbnz	r5, 8001888 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184c:	69a3      	ldr	r3, [r4, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 808c 	beq.w	800196c <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001854:	4a4f      	ldr	r2, [pc, #316]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 8001856:	6892      	ldr	r2, [r2, #8]
 8001858:	f002 020c 	and.w	r2, r2, #12
 800185c:	2a08      	cmp	r2, #8
 800185e:	d054      	beq.n	800190a <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001860:	2b02      	cmp	r3, #2
 8001862:	d017      	beq.n	8001894 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <HAL_RCC_OscConfig+0x440>)
 8001866:	2200      	movs	r2, #0
 8001868:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fa1f 	bl	8000cac <HAL_GetTick>
 800186e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001870:	4b48      	ldr	r3, [pc, #288]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001878:	d045      	beq.n	8001906 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fa17 	bl	8000cac <HAL_GetTick>
 800187e:	1b00      	subs	r0, r0, r4
 8001880:	2802      	cmp	r0, #2
 8001882:	d9f5      	bls.n	8001870 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001884:	2003      	movs	r0, #3
 8001886:	e072      	b.n	800196e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4a42      	ldr	r2, [pc, #264]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 800188a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	e7db      	b.n	800184c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001894:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <HAL_RCC_OscConfig+0x440>)
 8001896:	2200      	movs	r2, #0
 8001898:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800189a:	f7ff fa07 	bl	8000cac <HAL_GetTick>
 800189e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018a8:	d006      	beq.n	80018b8 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f9ff 	bl	8000cac <HAL_GetTick>
 80018ae:	1b40      	subs	r0, r0, r5
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d9f5      	bls.n	80018a0 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80018b4:	2003      	movs	r0, #3
 80018b6:	e05a      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b8:	69e3      	ldr	r3, [r4, #28]
 80018ba:	6a22      	ldr	r2, [r4, #32]
 80018bc:	4313      	orrs	r3, r2
 80018be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80018c0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018c6:	0852      	lsrs	r2, r2, #1
 80018c8:	3a01      	subs	r2, #1
 80018ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80018d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80018d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018da:	4a2e      	ldr	r2, [pc, #184]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 80018dc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <HAL_RCC_OscConfig+0x440>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018e4:	f7ff f9e2 	bl	8000cac <HAL_GetTick>
 80018e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f9da 	bl	8000cac <HAL_GetTick>
 80018f8:	1b00      	subs	r0, r0, r4
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f5      	bls.n	80018ea <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e035      	b.n	800196e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001902:	2000      	movs	r0, #0
 8001904:	e033      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 8001906:	2000      	movs	r0, #0
 8001908:	e031      	b.n	800196e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190a:	2b01      	cmp	r3, #1
 800190c:	d031      	beq.n	8001972 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_RCC_OscConfig+0x43c>)
 8001910:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001916:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001918:	4291      	cmp	r1, r2
 800191a:	d12c      	bne.n	8001976 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001920:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	428a      	cmp	r2, r1
 8001924:	d129      	bne.n	800197a <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001926:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800192c:	401a      	ands	r2, r3
 800192e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001932:	d124      	bne.n	800197e <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001934:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001938:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800193a:	0852      	lsrs	r2, r2, #1
 800193c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001942:	d11e      	bne.n	8001982 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001944:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001948:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800194e:	d11a      	bne.n	8001986 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001950:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8001954:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001956:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800195a:	d116      	bne.n	800198a <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	e006      	b.n	800196e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
}
 8001962:	4770      	bx	lr
        return HAL_ERROR;
 8001964:	2001      	movs	r0, #1
 8001966:	e002      	b.n	800196e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001968:	2001      	movs	r0, #1
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800196c:	2000      	movs	r0, #0
}
 800196e:	b002      	add	sp, #8
 8001970:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001972:	2001      	movs	r0, #1
 8001974:	e7fb      	b.n	800196e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001976:	2001      	movs	r0, #1
 8001978:	e7f9      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 800197a:	2001      	movs	r0, #1
 800197c:	e7f7      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 800197e:	2001      	movs	r0, #1
 8001980:	e7f5      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 8001982:	2001      	movs	r0, #1
 8001984:	e7f3      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 8001986:	2001      	movs	r0, #1
 8001988:	e7f1      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 800198a:	2001      	movs	r0, #1
 800198c:	e7ef      	b.n	800196e <HAL_RCC_OscConfig+0x416>
 800198e:	bf00      	nop
 8001990:	40007000 	.word	0x40007000
 8001994:	40023800 	.word	0x40023800
 8001998:	42470000 	.word	0x42470000

0800199c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800199c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800199e:	f102 030c 	add.w	r3, r2, #12
 80019a2:	e853 3f00 	ldrex	r3, [r3]
 80019a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019aa:	320c      	adds	r2, #12
 80019ac:	e842 3100 	strex	r1, r3, [r2]
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d1f3      	bne.n	800199c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019b6:	f102 0314 	add.w	r3, r2, #20
 80019ba:	e853 3f00 	ldrex	r3, [r3]
 80019be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019c2:	3214      	adds	r2, #20
 80019c4:	e842 3100 	strex	r1, r3, [r2]
 80019c8:	2900      	cmp	r1, #0
 80019ca:	d1f3      	bne.n	80019b4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d005      	beq.n	80019de <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019d2:	2320      	movs	r3, #32
 80019d4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019d8:	2300      	movs	r3, #0
 80019da:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80019dc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019e0:	f102 030c 	add.w	r3, r2, #12
 80019e4:	e853 3f00 	ldrex	r3, [r3]
 80019e8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ec:	320c      	adds	r2, #12
 80019ee:	e842 3100 	strex	r1, r3, [r2]
 80019f2:	2900      	cmp	r1, #0
 80019f4:	d1f3      	bne.n	80019de <UART_EndRxTransfer+0x42>
 80019f6:	e7ec      	b.n	80019d2 <UART_EndRxTransfer+0x36>

080019f8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019f8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80019fc:	2b21      	cmp	r3, #33	@ 0x21
 80019fe:	d001      	beq.n	8001a04 <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a00:	2002      	movs	r0, #2
  }
}
 8001a02:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a04:	6883      	ldr	r3, [r0, #8]
 8001a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a0a:	d017      	beq.n	8001a3c <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a0c:	6a03      	ldr	r3, [r0, #32]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	6202      	str	r2, [r0, #32]
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	6803      	ldr	r3, [r0, #0]
 8001a16:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001a18:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8001a22:	b94b      	cbnz	r3, 8001a38 <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a24:	6802      	ldr	r2, [r0, #0]
 8001a26:	68d3      	ldr	r3, [r2, #12]
 8001a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a2c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a2e:	6802      	ldr	r2, [r0, #0]
 8001a30:	68d3      	ldr	r3, [r2, #12]
 8001a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a36:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a3c:	6903      	ldr	r3, [r0, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1e4      	bne.n	8001a0c <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001a42:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	6802      	ldr	r2, [r0, #0]
 8001a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001a4e:	6a03      	ldr	r3, [r0, #32]
 8001a50:	3302      	adds	r3, #2
 8001a52:	6203      	str	r3, [r0, #32]
 8001a54:	e7e0      	b.n	8001a18 <UART_Transmit_IT+0x20>
	...

08001a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a5c:	6802      	ldr	r2, [r0, #0]
 8001a5e:	6913      	ldr	r3, [r2, #16]
 8001a60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a64:	68c1      	ldr	r1, [r0, #12]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a6a:	6883      	ldr	r3, [r0, #8]
 8001a6c:	6902      	ldr	r2, [r0, #16]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	6943      	ldr	r3, [r0, #20]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	69c3      	ldr	r3, [r0, #28]
 8001a76:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001a78:	6801      	ldr	r1, [r0, #0]
 8001a7a:	68cb      	ldr	r3, [r1, #12]
 8001a7c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001a80:	f023 030c 	bic.w	r3, r3, #12
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a88:	6802      	ldr	r2, [r0, #0]
 8001a8a:	6953      	ldr	r3, [r2, #20]
 8001a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a90:	6981      	ldr	r1, [r0, #24]
 8001a92:	430b      	orrs	r3, r1
 8001a94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a96:	6803      	ldr	r3, [r0, #0]
 8001a98:	4a31      	ldr	r2, [pc, #196]	@ (8001b60 <UART_SetConfig+0x108>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d006      	beq.n	8001aac <UART_SetConfig+0x54>
 8001a9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d002      	beq.n	8001aac <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aa6:	f7ff fca3 	bl	80013f0 <HAL_RCC_GetPCLK1Freq>
 8001aaa:	e001      	b.n	8001ab0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001aac:	f7ff fcb0 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab0:	69e3      	ldr	r3, [r4, #28]
 8001ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ab6:	d029      	beq.n	8001b0c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	1803      	adds	r3, r0, r0
 8001abc:	4149      	adcs	r1, r1
 8001abe:	181b      	adds	r3, r3, r0
 8001ac0:	f141 0100 	adc.w	r1, r1, #0
 8001ac4:	00c9      	lsls	r1, r1, #3
 8001ac6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1818      	adds	r0, r3, r0
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001ad4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001ad8:	f141 0100 	adc.w	r1, r1, #0
 8001adc:	f7fe fbd0 	bl	8000280 <__aeabi_uldivmod>
 8001ae0:	4a20      	ldr	r2, [pc, #128]	@ (8001b64 <UART_SetConfig+0x10c>)
 8001ae2:	fba2 3100 	umull	r3, r1, r2, r0
 8001ae6:	0949      	lsrs	r1, r1, #5
 8001ae8:	2364      	movs	r3, #100	@ 0x64
 8001aea:	fb03 0311 	mls	r3, r3, r1, r0
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	3332      	adds	r3, #50	@ 0x32
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001afc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	6821      	ldr	r1, [r4, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }
}
 8001b0a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	1802      	adds	r2, r0, r0
 8001b10:	eb43 0103 	adc.w	r1, r3, r3
 8001b14:	1812      	adds	r2, r2, r0
 8001b16:	f141 0100 	adc.w	r1, r1, #0
 8001b1a:	00c9      	lsls	r1, r1, #3
 8001b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b20:	00d2      	lsls	r2, r2, #3
 8001b22:	1810      	adds	r0, r2, r0
 8001b24:	f141 0100 	adc.w	r1, r1, #0
 8001b28:	6862      	ldr	r2, [r4, #4]
 8001b2a:	1892      	adds	r2, r2, r2
 8001b2c:	415b      	adcs	r3, r3
 8001b2e:	f7fe fba7 	bl	8000280 <__aeabi_uldivmod>
 8001b32:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <UART_SetConfig+0x10c>)
 8001b34:	fba2 3100 	umull	r3, r1, r2, r0
 8001b38:	0949      	lsrs	r1, r1, #5
 8001b3a:	2364      	movs	r3, #100	@ 0x64
 8001b3c:	fb03 0311 	mls	r3, r3, r1, r0
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	3332      	adds	r3, #50	@ 0x32
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	005a      	lsls	r2, r3, #1
 8001b4c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001b50:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	6821      	ldr	r1, [r4, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
 8001b5e:	e7d4      	b.n	8001b0a <UART_SetConfig+0xb2>
 8001b60:	40011000 	.word	0x40011000
 8001b64:	51eb851f 	.word	0x51eb851f

08001b68 <UART_WaitOnFlagUntilTimeout>:
{
 8001b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	4605      	mov	r5, r0
 8001b70:	460e      	mov	r6, r1
 8001b72:	4617      	mov	r7, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	681c      	ldr	r4, [r3, #0]
 8001b7e:	ea36 0404 	bics.w	r4, r6, r4
 8001b82:	bf0c      	ite	eq
 8001b84:	2401      	moveq	r4, #1
 8001b86:	2400      	movne	r4, #0
 8001b88:	42bc      	cmp	r4, r7
 8001b8a:	d128      	bne.n	8001bde <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001b90:	d0f3      	beq.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7ff f88b 	bl	8000cac <HAL_GetTick>
 8001b96:	eba0 0009 	sub.w	r0, r0, r9
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d823      	bhi.n	8001be6 <UART_WaitOnFlagUntilTimeout+0x7e>
 8001b9e:	f1b8 0f00 	cmp.w	r8, #0
 8001ba2:	d022      	beq.n	8001bea <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	f012 0f04 	tst.w	r2, #4
 8001bac:	d0e5      	beq.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x12>
 8001bae:	2e80      	cmp	r6, #128	@ 0x80
 8001bb0:	d0e3      	beq.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x12>
 8001bb2:	2e40      	cmp	r6, #64	@ 0x40
 8001bb4:	d0e1      	beq.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f012 0f08 	tst.w	r2, #8
 8001bbc:	d0dd      	beq.n	8001b7a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	9401      	str	r4, [sp, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	9201      	str	r2, [sp, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f7ff fee5 	bl	800199c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001bd6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e000      	b.n	8001be0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001bde:	2000      	movs	r0, #0
}
 8001be0:	b003      	add	sp, #12
 8001be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001be6:	2003      	movs	r0, #3
 8001be8:	e7fa      	b.n	8001be0 <UART_WaitOnFlagUntilTimeout+0x78>
 8001bea:	2003      	movs	r0, #3
 8001bec:	e7f8      	b.n	8001be0 <UART_WaitOnFlagUntilTimeout+0x78>

08001bee <HAL_UART_MspInit>:
}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_UART_Init>:
  if (huart == NULL)
 8001bf0:	b360      	cbz	r0, 8001c4c <HAL_UART_Init+0x5c>
{
 8001bf2:	b510      	push	{r4, lr}
 8001bf4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001bf6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001bfa:	b313      	cbz	r3, 8001c42 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bfc:	2324      	movs	r3, #36	@ 0x24
 8001bfe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	68d3      	ldr	r3, [r2, #12]
 8001c06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c0a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff ff23 	bl	8001a58 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	6913      	ldr	r3, [r2, #16]
 8001c16:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001c1a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c1c:	6822      	ldr	r2, [r4, #0]
 8001c1e:	6953      	ldr	r3, [r2, #20]
 8001c20:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001c24:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001c26:	6822      	ldr	r2, [r4, #0]
 8001c28:	68d3      	ldr	r3, [r2, #12]
 8001c2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c2e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c30:	2000      	movs	r0, #0
 8001c32:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c3e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001c40:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c42:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001c46:	f7ff ffd2 	bl	8001bee <HAL_UART_MspInit>
 8001c4a:	e7d7      	b.n	8001bfc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_UART_Transmit>:
{
 8001c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c58:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d156      	bne.n	8001d0e <HAL_UART_Transmit+0xbe>
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001c66:	2900      	cmp	r1, #0
 8001c68:	d055      	beq.n	8001d16 <HAL_UART_Transmit+0xc6>
 8001c6a:	b90a      	cbnz	r2, 8001c70 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	e04f      	b.n	8001d10 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c74:	2321      	movs	r3, #33	@ 0x21
 8001c76:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001c7a:	f7ff f817 	bl	8000cac <HAL_GetTick>
 8001c7e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001c80:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c84:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c88:	68a3      	ldr	r3, [r4, #8]
 8001c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c8e:	d002      	beq.n	8001c96 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8001c90:	f04f 0800 	mov.w	r8, #0
 8001c94:	e014      	b.n	8001cc0 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c96:	6923      	ldr	r3, [r4, #16]
 8001c98:	b32b      	cbz	r3, 8001ce6 <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 8001c9a:	f04f 0800 	mov.w	r8, #0
 8001c9e:	e00f      	b.n	8001cc0 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	e032      	b.n	8001d10 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001caa:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001cb6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	3a01      	subs	r2, #1
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cc0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b193      	cbz	r3, 8001cec <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	9600      	str	r6, [sp, #0]
 8001cc8:	463b      	mov	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff ff4a 	bl	8001b68 <UART_WaitOnFlagUntilTimeout>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d1e3      	bne.n	8001ca0 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8001cd8:	2d00      	cmp	r5, #0
 8001cda:	d0e6      	beq.n	8001caa <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cdc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ce4:	e7e7      	b.n	8001cb6 <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 8001ce6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001ce8:	2500      	movs	r5, #0
 8001cea:	e7e9      	b.n	8001cc0 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cec:	9600      	str	r6, [sp, #0]
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2140      	movs	r1, #64	@ 0x40
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff ff37 	bl	8001b68 <UART_WaitOnFlagUntilTimeout>
 8001cfa:	b918      	cbnz	r0, 8001d04 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001d02:	e005      	b.n	8001d10 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8001d04:	2320      	movs	r3, #32
 8001d06:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	e000      	b.n	8001d10 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001d0e:	2002      	movs	r0, #2
}
 8001d10:	b002      	add	sp, #8
 8001d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	e7fa      	b.n	8001d10 <HAL_UART_Transmit+0xc0>

08001d1a <HAL_UART_TxCpltCallback>:
}
 8001d1a:	4770      	bx	lr

08001d1c <UART_EndTransmit_IT>:
{
 8001d1c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d1e:	6801      	ldr	r1, [r0, #0]
 8001d20:	68ca      	ldr	r2, [r1, #12]
 8001d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d26:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8001d2e:	f7ff fff4 	bl	8001d1a <HAL_UART_TxCpltCallback>
}
 8001d32:	2000      	movs	r0, #0
 8001d34:	bd08      	pop	{r3, pc}

08001d36 <HAL_UART_ErrorCallback>:
}
 8001d36:	4770      	bx	lr

08001d38 <UART_DMAAbortOnError>:
{
 8001d38:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8001d40:	f7ff fff9 	bl	8001d36 <HAL_UART_ErrorCallback>
}
 8001d44:	bd08      	pop	{r3, pc}

08001d46 <HAL_UARTEx_RxEventCallback>:
}
 8001d46:	4770      	bx	lr

08001d48 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d48:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8001d4c:	2b22      	cmp	r3, #34	@ 0x22
 8001d4e:	d169      	bne.n	8001e24 <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d50:	6883      	ldr	r3, [r0, #8]
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d56:	d04f      	beq.n	8001df8 <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001d58:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5e:	d004      	beq.n	8001d6a <UART_Receive_IT+0x22>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d156      	bne.n	8001e12 <UART_Receive_IT+0xca>
 8001d64:	6903      	ldr	r3, [r0, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d153      	bne.n	8001e12 <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d6a:	6803      	ldr	r3, [r0, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001d70:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001d72:	3301      	adds	r3, #1
 8001d74:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8001d76:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d151      	bne.n	8001e28 <UART_Receive_IT+0xe0>
{
 8001d84:	b500      	push	{lr}
 8001d86:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d88:	6802      	ldr	r2, [r0, #0]
 8001d8a:	68d3      	ldr	r3, [r2, #12]
 8001d8c:	f023 0320 	bic.w	r3, r3, #32
 8001d90:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d92:	6802      	ldr	r2, [r0, #0]
 8001d94:	68d3      	ldr	r3, [r2, #12]
 8001d96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d9a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d9c:	6802      	ldr	r2, [r0, #0]
 8001d9e:	6953      	ldr	r3, [r2, #20]
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001da6:	2320      	movs	r3, #32
 8001da8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dac:	2300      	movs	r3, #0
 8001dae:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d133      	bne.n	8001e1e <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db6:	2300      	movs	r3, #0
 8001db8:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dbc:	f102 030c 	add.w	r3, r2, #12
 8001dc0:	e853 3f00 	ldrex	r3, [r3]
 8001dc4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc8:	320c      	adds	r2, #12
 8001dca:	e842 3100 	strex	r1, r3, [r2]
 8001dce:	2900      	cmp	r1, #0
 8001dd0:	d1f3      	bne.n	8001dba <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001dd2:	6803      	ldr	r3, [r0, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f012 0f10 	tst.w	r2, #16
 8001dda:	d006      	beq.n	8001dea <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	9201      	str	r2, [sp, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001dea:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8001dec:	f7ff ffab 	bl	8001d46 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8001df0:	2000      	movs	r0, #0
}
 8001df2:	b003      	add	sp, #12
 8001df4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df8:	6902      	ldr	r2, [r0, #16]
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d1ac      	bne.n	8001d58 <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001dfe:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e00:	6803      	ldr	r3, [r0, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e08:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001e0a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	6283      	str	r3, [r0, #40]	@ 0x28
 8001e10:	e7b1      	b.n	8001d76 <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e12:	6803      	ldr	r3, [r0, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e1a:	7013      	strb	r3, [r2, #0]
 8001e1c:	e7a8      	b.n	8001d70 <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 8001e1e:	f7fe fd81 	bl	8000924 <HAL_UART_RxCpltCallback>
 8001e22:	e7e5      	b.n	8001df0 <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 8001e24:	2002      	movs	r0, #2
 8001e26:	4770      	bx	lr
    return HAL_OK;
 8001e28:	2000      	movs	r0, #0
}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_UART_IRQHandler>:
{
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e32:	6802      	ldr	r2, [r0, #0]
 8001e34:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e36:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e38:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001e3a:	f013 0f0f 	tst.w	r3, #15
 8001e3e:	d109      	bne.n	8001e54 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e40:	f013 0f20 	tst.w	r3, #32
 8001e44:	d00c      	beq.n	8001e60 <HAL_UART_IRQHandler+0x34>
 8001e46:	f010 0f20 	tst.w	r0, #32
 8001e4a:	d009      	beq.n	8001e60 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff ff7b 	bl	8001d48 <UART_Receive_IT>
      return;
 8001e52:	e016      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e54:	f011 0101 	ands.w	r1, r1, #1
 8001e58:	d115      	bne.n	8001e86 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e5a:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8001e5e:	d112      	bne.n	8001e86 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001e62:	2901      	cmp	r1, #1
 8001e64:	d079      	beq.n	8001f5a <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e6a:	d003      	beq.n	8001e74 <HAL_UART_IRQHandler+0x48>
 8001e6c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001e70:	f040 8121 	bne.w	80020b6 <HAL_UART_IRQHandler+0x28a>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e74:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001e78:	d003      	beq.n	8001e82 <HAL_UART_IRQHandler+0x56>
 8001e7a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001e7e:	f040 811e 	bne.w	80020be <HAL_UART_IRQHandler+0x292>
}
 8001e82:	b002      	add	sp, #8
 8001e84:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e86:	f013 0f01 	tst.w	r3, #1
 8001e8a:	d006      	beq.n	8001e9a <HAL_UART_IRQHandler+0x6e>
 8001e8c:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8001e90:	d003      	beq.n	8001e9a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e9a:	f013 0f04 	tst.w	r3, #4
 8001e9e:	d004      	beq.n	8001eaa <HAL_UART_IRQHandler+0x7e>
 8001ea0:	b119      	cbz	r1, 8001eaa <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ea2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001ea4:	f042 0202 	orr.w	r2, r2, #2
 8001ea8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eaa:	f013 0f02 	tst.w	r3, #2
 8001eae:	d004      	beq.n	8001eba <HAL_UART_IRQHandler+0x8e>
 8001eb0:	b119      	cbz	r1, 8001eba <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001eb2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001eb4:	f042 0204 	orr.w	r2, r2, #4
 8001eb8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001eba:	f013 0f08 	tst.w	r3, #8
 8001ebe:	d007      	beq.n	8001ed0 <HAL_UART_IRQHandler+0xa4>
 8001ec0:	f010 0f20 	tst.w	r0, #32
 8001ec4:	d100      	bne.n	8001ec8 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ec6:	b119      	cbz	r1, 8001ed0 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ec8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001eca:	f042 0208 	orr.w	r2, r2, #8
 8001ece:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ed0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d0d5      	beq.n	8001e82 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ed6:	f013 0f20 	tst.w	r3, #32
 8001eda:	d002      	beq.n	8001ee2 <HAL_UART_IRQHandler+0xb6>
 8001edc:	f010 0f20 	tst.w	r0, #32
 8001ee0:	d129      	bne.n	8001f36 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001eec:	f012 0f08 	tst.w	r2, #8
 8001ef0:	d100      	bne.n	8001ef4 <HAL_UART_IRQHandler+0xc8>
 8001ef2:	b363      	cbz	r3, 8001f4e <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fd51 	bl	800199c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001f02:	d020      	beq.n	8001f46 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f06:	f102 0314 	add.w	r3, r2, #20
 8001f0a:	e853 3f00 	ldrex	r3, [r3]
 8001f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f12:	3214      	adds	r2, #20
 8001f14:	e842 3100 	strex	r1, r3, [r2]
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d1f3      	bne.n	8001f04 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8001f1c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001f1e:	b173      	cbz	r3, 8001f3e <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f20:	4a69      	ldr	r2, [pc, #420]	@ (80020c8 <HAL_UART_IRQHandler+0x29c>)
 8001f22:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f24:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001f26:	f7fe ff8c 	bl	8000e42 <HAL_DMA_Abort_IT>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d0a9      	beq.n	8001e82 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f2e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001f30:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001f32:	4798      	blx	r3
 8001f34:	e7a5      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff ff06 	bl	8001d48 <UART_Receive_IT>
 8001f3c:	e7d1      	b.n	8001ee2 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff fef9 	bl	8001d36 <HAL_UART_ErrorCallback>
 8001f44:	e79d      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fef5 	bl	8001d36 <HAL_UART_ErrorCallback>
 8001f4c:	e799      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff fef1 	bl	8001d36 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8001f58:	e793      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f5a:	f013 0f10 	tst.w	r3, #16
 8001f5e:	d082      	beq.n	8001e66 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001f60:	f010 0f10 	tst.w	r0, #16
 8001f64:	f43f af7f 	beq.w	8001e66 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	6853      	ldr	r3, [r2, #4]
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f76:	6953      	ldr	r3, [r2, #20]
 8001f78:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001f7c:	d05f      	beq.n	800203e <HAL_UART_IRQHandler+0x212>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f7e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04a      	beq.n	8002020 <HAL_UART_IRQHandler+0x1f4>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f8a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001f8c:	4299      	cmp	r1, r3
 8001f8e:	d947      	bls.n	8002020 <HAL_UART_IRQHandler+0x1f4>
        huart->RxXferCount = nb_remaining_rx_data;
 8001f90:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f92:	69d3      	ldr	r3, [r2, #28]
 8001f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f98:	d037      	beq.n	800200a <HAL_UART_IRQHandler+0x1de>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f9a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9c:	f102 030c 	add.w	r3, r2, #12
 8001fa0:	e853 3f00 	ldrex	r3, [r3]
 8001fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa8:	320c      	adds	r2, #12
 8001faa:	e842 3100 	strex	r1, r3, [r2]
 8001fae:	2900      	cmp	r1, #0
 8001fb0:	d1f3      	bne.n	8001f9a <HAL_UART_IRQHandler+0x16e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb4:	f102 0314 	add.w	r3, r2, #20
 8001fb8:	e853 3f00 	ldrex	r3, [r3]
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc0:	3214      	adds	r2, #20
 8001fc2:	e842 3100 	strex	r1, r3, [r2]
 8001fc6:	2900      	cmp	r1, #0
 8001fc8:	d1f3      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x186>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fcc:	f102 0314 	add.w	r3, r2, #20
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd8:	3214      	adds	r2, #20
 8001fda:	e842 3100 	strex	r1, r3, [r2]
 8001fde:	2900      	cmp	r1, #0
 8001fe0:	d1f3      	bne.n	8001fca <HAL_UART_IRQHandler+0x19e>
          huart->RxState = HAL_UART_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	f102 030c 	add.w	r3, r2, #12
 8001ff2:	e853 3f00 	ldrex	r3, [r3]
 8001ff6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	320c      	adds	r2, #12
 8001ffc:	e842 3100 	strex	r1, r3, [r2]
 8002000:	2900      	cmp	r1, #0
 8002002:	d1f3      	bne.n	8001fec <HAL_UART_IRQHandler+0x1c0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002004:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002006:	f7fe fed3 	bl	8000db0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800200a:	2302      	movs	r3, #2
 800200c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800200e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002010:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002012:	b29b      	uxth	r3, r3
 8002014:	1ac9      	subs	r1, r1, r3
 8002016:	b289      	uxth	r1, r1
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fe94 	bl	8001d46 <HAL_UARTEx_RxEventCallback>
 800201e:	e730      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002020:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002022:	4299      	cmp	r1, r3
 8002024:	f47f af2d 	bne.w	8001e82 <HAL_UART_IRQHandler+0x56>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002028:	69d3      	ldr	r3, [r2, #28]
 800202a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202e:	f47f af28 	bne.w	8001e82 <HAL_UART_IRQHandler+0x56>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002032:	2302      	movs	r3, #2
 8002034:	6363      	str	r3, [r4, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff fe85 	bl	8001d46 <HAL_UARTEx_RxEventCallback>
      return;
 800203c:	e721      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800203e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002040:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002042:	b29b      	uxth	r3, r3
 8002044:	1ac9      	subs	r1, r1, r3
 8002046:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002048:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	f43f af18 	beq.w	8001e82 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8002052:	2900      	cmp	r1, #0
 8002054:	f43f af15 	beq.w	8001e82 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002058:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205a:	f102 030c 	add.w	r3, r2, #12
 800205e:	e853 3f00 	ldrex	r3, [r3]
 8002062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002066:	320c      	adds	r2, #12
 8002068:	e842 3000 	strex	r0, r3, [r2]
 800206c:	2800      	cmp	r0, #0
 800206e:	d1f3      	bne.n	8002058 <HAL_UART_IRQHandler+0x22c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002070:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002072:	f102 0314 	add.w	r3, r2, #20
 8002076:	e853 3f00 	ldrex	r3, [r3]
 800207a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207e:	3214      	adds	r2, #20
 8002080:	e842 3000 	strex	r0, r3, [r2]
 8002084:	2800      	cmp	r0, #0
 8002086:	d1f3      	bne.n	8002070 <HAL_UART_IRQHandler+0x244>
        huart->RxState = HAL_UART_STATE_READY;
 8002088:	2320      	movs	r3, #32
 800208a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800208e:	2300      	movs	r3, #0
 8002090:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002092:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002094:	f102 030c 	add.w	r3, r2, #12
 8002098:	e853 3f00 	ldrex	r3, [r3]
 800209c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a0:	320c      	adds	r2, #12
 80020a2:	e842 3000 	strex	r0, r3, [r2]
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d1f3      	bne.n	8002092 <HAL_UART_IRQHandler+0x266>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020aa:	2302      	movs	r3, #2
 80020ac:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7ff fe49 	bl	8001d46 <HAL_UARTEx_RxEventCallback>
      return;
 80020b4:	e6e5      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7ff fc9e 	bl	80019f8 <UART_Transmit_IT>
    return;
 80020bc:	e6e1      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff fe2c 	bl	8001d1c <UART_EndTransmit_IT>
    return;
 80020c4:	e6dd      	b.n	8001e82 <HAL_UART_IRQHandler+0x56>
 80020c6:	bf00      	nop
 80020c8:	08001d39 	.word	0x08001d39

080020cc <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 80020cc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 80020ce:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80020d0:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020d6:	2322      	movs	r3, #34	@ 0x22
 80020d8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 80020dc:	6903      	ldr	r3, [r0, #16]
 80020de:	b123      	cbz	r3, 80020ea <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020e0:	6802      	ldr	r2, [r0, #0]
 80020e2:	68d3      	ldr	r3, [r2, #12]
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80020ea:	6802      	ldr	r2, [r0, #0]
 80020ec:	6953      	ldr	r3, [r2, #20]
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80020f4:	6802      	ldr	r2, [r0, #0]
 80020f6:	68d3      	ldr	r3, [r2, #12]
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	60d3      	str	r3, [r2, #12]
}
 80020fe:	2000      	movs	r0, #0
 8002100:	4770      	bx	lr

08002102 <HAL_UART_Receive_IT>:
{
 8002102:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002104:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002108:	2b20      	cmp	r3, #32
 800210a:	d108      	bne.n	800211e <HAL_UART_Receive_IT+0x1c>
    if ((pData == NULL) || (Size == 0U))
 800210c:	b149      	cbz	r1, 8002122 <HAL_UART_Receive_IT+0x20>
 800210e:	b90a      	cbnz	r2, 8002114 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
}
 8002112:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002114:	2300      	movs	r3, #0
 8002116:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002118:	f7ff ffd8 	bl	80020cc <UART_Start_Receive_IT>
 800211c:	e7f9      	b.n	8002112 <HAL_UART_Receive_IT+0x10>
    return HAL_BUSY;
 800211e:	2002      	movs	r0, #2
 8002120:	e7f7      	b.n	8002112 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	e7f5      	b.n	8002112 <HAL_UART_Receive_IT+0x10>

08002126 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002126:	e7fe      	b.n	8002126 <NMI_Handler>

08002128 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <HardFault_Handler>

0800212a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <MemManage_Handler>

0800212c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <BusFault_Handler>

0800212e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <UsageFault_Handler>

08002130 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002130:	4770      	bx	lr

08002132 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002132:	4770      	bx	lr

08002134 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002134:	4770      	bx	lr

08002136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002136:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f7fe fdac 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	bd08      	pop	{r3, pc}
	...

08002140 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002140:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002142:	4802      	ldr	r0, [pc, #8]	@ (800214c <DMA1_Stream5_IRQHandler+0xc>)
 8002144:	f7fe fe90 	bl	8000e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002148:	bd08      	pop	{r3, pc}
 800214a:	bf00      	nop
 800214c:	20000110 	.word	0x20000110

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b510      	push	{r4, lr}
 8002152:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <_sbrk+0x38>)
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	480d      	ldr	r0, [pc, #52]	@ (8002190 <_sbrk+0x40>)
 800215a:	6800      	ldr	r0, [r0, #0]
 800215c:	b140      	cbz	r0, 8002170 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	480c      	ldr	r0, [pc, #48]	@ (8002190 <_sbrk+0x40>)
 8002160:	6800      	ldr	r0, [r0, #0]
 8002162:	4403      	add	r3, r0
 8002164:	1a52      	subs	r2, r2, r1
 8002166:	4293      	cmp	r3, r2
 8002168:	d806      	bhi.n	8002178 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800216a:	4a09      	ldr	r2, [pc, #36]	@ (8002190 <_sbrk+0x40>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800216e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002170:	4807      	ldr	r0, [pc, #28]	@ (8002190 <_sbrk+0x40>)
 8002172:	4c08      	ldr	r4, [pc, #32]	@ (8002194 <_sbrk+0x44>)
 8002174:	6004      	str	r4, [r0, #0]
 8002176:	e7f2      	b.n	800215e <_sbrk+0xe>
    errno = ENOMEM;
 8002178:	f000 f86c 	bl	8002254 <__errno>
 800217c:	230c      	movs	r3, #12
 800217e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	e7f3      	b.n	800216e <_sbrk+0x1e>
 8002186:	bf00      	nop
 8002188:	20020000 	.word	0x20020000
 800218c:	00000400 	.word	0x00000400
 8002190:	20000174 	.word	0x20000174
 8002194:	200002c0 	.word	0x200002c0

08002198 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002198:	4a03      	ldr	r2, [pc, #12]	@ (80021a8 <SystemInit+0x10>)
 800219a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800219e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021b0:	f7ff fff2 	bl	8002198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b4:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021b6:	490d      	ldr	r1, [pc, #52]	@ (80021ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021bc:	e002      	b.n	80021c4 <LoopCopyDataInit>

080021be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c2:	3304      	adds	r3, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c8:	d3f9      	bcc.n	80021be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021cc:	4c0a      	ldr	r4, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d0:	e001      	b.n	80021d6 <LoopFillZerobss>

080021d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d4:	3204      	adds	r2, #4

080021d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d8:	d3fb      	bcc.n	80021d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021da:	f000 f841 	bl	8002260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7fe fc93 	bl	8000b08 <main>
  bx  lr    
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80021f0:	08002ef0 	.word	0x08002ef0
  ldr r2, =_sbss
 80021f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80021f8:	200002c0 	.word	0x200002c0

080021fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <CAN1_RX0_IRQHandler>
	...

08002200 <siprintf>:
 8002200:	b40e      	push	{r1, r2, r3}
 8002202:	b510      	push	{r4, lr}
 8002204:	b09d      	sub	sp, #116	@ 0x74
 8002206:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002208:	9002      	str	r0, [sp, #8]
 800220a:	9006      	str	r0, [sp, #24]
 800220c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002210:	480a      	ldr	r0, [pc, #40]	@ (800223c <siprintf+0x3c>)
 8002212:	9107      	str	r1, [sp, #28]
 8002214:	9104      	str	r1, [sp, #16]
 8002216:	490a      	ldr	r1, [pc, #40]	@ (8002240 <siprintf+0x40>)
 8002218:	f853 2b04 	ldr.w	r2, [r3], #4
 800221c:	9105      	str	r1, [sp, #20]
 800221e:	2400      	movs	r4, #0
 8002220:	a902      	add	r1, sp, #8
 8002222:	6800      	ldr	r0, [r0, #0]
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002228:	f000 f998 	bl	800255c <_svfiprintf_r>
 800222c:	9b02      	ldr	r3, [sp, #8]
 800222e:	701c      	strb	r4, [r3, #0]
 8002230:	b01d      	add	sp, #116	@ 0x74
 8002232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002236:	b003      	add	sp, #12
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2000000c 	.word	0x2000000c
 8002240:	ffff0208 	.word	0xffff0208

08002244 <memset>:
 8002244:	4402      	add	r2, r0
 8002246:	4603      	mov	r3, r0
 8002248:	4293      	cmp	r3, r2
 800224a:	d100      	bne.n	800224e <memset+0xa>
 800224c:	4770      	bx	lr
 800224e:	f803 1b01 	strb.w	r1, [r3], #1
 8002252:	e7f9      	b.n	8002248 <memset+0x4>

08002254 <__errno>:
 8002254:	4b01      	ldr	r3, [pc, #4]	@ (800225c <__errno+0x8>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000000c 	.word	0x2000000c

08002260 <__libc_init_array>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <__libc_init_array+0x38>)
 8002264:	4d0d      	ldr	r5, [pc, #52]	@ (800229c <__libc_init_array+0x3c>)
 8002266:	1b5b      	subs	r3, r3, r5
 8002268:	109c      	asrs	r4, r3, #2
 800226a:	2600      	movs	r6, #0
 800226c:	42a6      	cmp	r6, r4
 800226e:	d109      	bne.n	8002284 <__libc_init_array+0x24>
 8002270:	f000 fde8 	bl	8002e44 <_init>
 8002274:	4d0a      	ldr	r5, [pc, #40]	@ (80022a0 <__libc_init_array+0x40>)
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <__libc_init_array+0x44>)
 8002278:	1b5b      	subs	r3, r3, r5
 800227a:	109c      	asrs	r4, r3, #2
 800227c:	2600      	movs	r6, #0
 800227e:	42a6      	cmp	r6, r4
 8002280:	d105      	bne.n	800228e <__libc_init_array+0x2e>
 8002282:	bd70      	pop	{r4, r5, r6, pc}
 8002284:	f855 3b04 	ldr.w	r3, [r5], #4
 8002288:	4798      	blx	r3
 800228a:	3601      	adds	r6, #1
 800228c:	e7ee      	b.n	800226c <__libc_init_array+0xc>
 800228e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002292:	4798      	blx	r3
 8002294:	3601      	adds	r6, #1
 8002296:	e7f2      	b.n	800227e <__libc_init_array+0x1e>
 8002298:	08002ee8 	.word	0x08002ee8
 800229c:	08002ee8 	.word	0x08002ee8
 80022a0:	08002ee8 	.word	0x08002ee8
 80022a4:	08002eec 	.word	0x08002eec

080022a8 <__retarget_lock_acquire_recursive>:
 80022a8:	4770      	bx	lr

080022aa <__retarget_lock_release_recursive>:
 80022aa:	4770      	bx	lr

080022ac <_free_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4605      	mov	r5, r0
 80022b0:	2900      	cmp	r1, #0
 80022b2:	d041      	beq.n	8002338 <_free_r+0x8c>
 80022b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b8:	1f0c      	subs	r4, r1, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfb8      	it	lt
 80022be:	18e4      	addlt	r4, r4, r3
 80022c0:	f000 f8e0 	bl	8002484 <__malloc_lock>
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <_free_r+0x90>)
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	b933      	cbnz	r3, 80022d8 <_free_r+0x2c>
 80022ca:	6063      	str	r3, [r4, #4]
 80022cc:	6014      	str	r4, [r2, #0]
 80022ce:	4628      	mov	r0, r5
 80022d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022d4:	f000 b8dc 	b.w	8002490 <__malloc_unlock>
 80022d8:	42a3      	cmp	r3, r4
 80022da:	d908      	bls.n	80022ee <_free_r+0x42>
 80022dc:	6820      	ldr	r0, [r4, #0]
 80022de:	1821      	adds	r1, r4, r0
 80022e0:	428b      	cmp	r3, r1
 80022e2:	bf01      	itttt	eq
 80022e4:	6819      	ldreq	r1, [r3, #0]
 80022e6:	685b      	ldreq	r3, [r3, #4]
 80022e8:	1809      	addeq	r1, r1, r0
 80022ea:	6021      	streq	r1, [r4, #0]
 80022ec:	e7ed      	b.n	80022ca <_free_r+0x1e>
 80022ee:	461a      	mov	r2, r3
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	b10b      	cbz	r3, 80022f8 <_free_r+0x4c>
 80022f4:	42a3      	cmp	r3, r4
 80022f6:	d9fa      	bls.n	80022ee <_free_r+0x42>
 80022f8:	6811      	ldr	r1, [r2, #0]
 80022fa:	1850      	adds	r0, r2, r1
 80022fc:	42a0      	cmp	r0, r4
 80022fe:	d10b      	bne.n	8002318 <_free_r+0x6c>
 8002300:	6820      	ldr	r0, [r4, #0]
 8002302:	4401      	add	r1, r0
 8002304:	1850      	adds	r0, r2, r1
 8002306:	4283      	cmp	r3, r0
 8002308:	6011      	str	r1, [r2, #0]
 800230a:	d1e0      	bne.n	80022ce <_free_r+0x22>
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	6053      	str	r3, [r2, #4]
 8002312:	4408      	add	r0, r1
 8002314:	6010      	str	r0, [r2, #0]
 8002316:	e7da      	b.n	80022ce <_free_r+0x22>
 8002318:	d902      	bls.n	8002320 <_free_r+0x74>
 800231a:	230c      	movs	r3, #12
 800231c:	602b      	str	r3, [r5, #0]
 800231e:	e7d6      	b.n	80022ce <_free_r+0x22>
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	1821      	adds	r1, r4, r0
 8002324:	428b      	cmp	r3, r1
 8002326:	bf04      	itt	eq
 8002328:	6819      	ldreq	r1, [r3, #0]
 800232a:	685b      	ldreq	r3, [r3, #4]
 800232c:	6063      	str	r3, [r4, #4]
 800232e:	bf04      	itt	eq
 8002330:	1809      	addeq	r1, r1, r0
 8002332:	6021      	streq	r1, [r4, #0]
 8002334:	6054      	str	r4, [r2, #4]
 8002336:	e7ca      	b.n	80022ce <_free_r+0x22>
 8002338:	bd38      	pop	{r3, r4, r5, pc}
 800233a:	bf00      	nop
 800233c:	200002bc 	.word	0x200002bc

08002340 <sbrk_aligned>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	4e0f      	ldr	r6, [pc, #60]	@ (8002380 <sbrk_aligned+0x40>)
 8002344:	460c      	mov	r4, r1
 8002346:	6831      	ldr	r1, [r6, #0]
 8002348:	4605      	mov	r5, r0
 800234a:	b911      	cbnz	r1, 8002352 <sbrk_aligned+0x12>
 800234c:	f000 fbaa 	bl	8002aa4 <_sbrk_r>
 8002350:	6030      	str	r0, [r6, #0]
 8002352:	4621      	mov	r1, r4
 8002354:	4628      	mov	r0, r5
 8002356:	f000 fba5 	bl	8002aa4 <_sbrk_r>
 800235a:	1c43      	adds	r3, r0, #1
 800235c:	d103      	bne.n	8002366 <sbrk_aligned+0x26>
 800235e:	f04f 34ff 	mov.w	r4, #4294967295
 8002362:	4620      	mov	r0, r4
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	1cc4      	adds	r4, r0, #3
 8002368:	f024 0403 	bic.w	r4, r4, #3
 800236c:	42a0      	cmp	r0, r4
 800236e:	d0f8      	beq.n	8002362 <sbrk_aligned+0x22>
 8002370:	1a21      	subs	r1, r4, r0
 8002372:	4628      	mov	r0, r5
 8002374:	f000 fb96 	bl	8002aa4 <_sbrk_r>
 8002378:	3001      	adds	r0, #1
 800237a:	d1f2      	bne.n	8002362 <sbrk_aligned+0x22>
 800237c:	e7ef      	b.n	800235e <sbrk_aligned+0x1e>
 800237e:	bf00      	nop
 8002380:	200002b8 	.word	0x200002b8

08002384 <_malloc_r>:
 8002384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002388:	1ccd      	adds	r5, r1, #3
 800238a:	f025 0503 	bic.w	r5, r5, #3
 800238e:	3508      	adds	r5, #8
 8002390:	2d0c      	cmp	r5, #12
 8002392:	bf38      	it	cc
 8002394:	250c      	movcc	r5, #12
 8002396:	2d00      	cmp	r5, #0
 8002398:	4606      	mov	r6, r0
 800239a:	db01      	blt.n	80023a0 <_malloc_r+0x1c>
 800239c:	42a9      	cmp	r1, r5
 800239e:	d904      	bls.n	80023aa <_malloc_r+0x26>
 80023a0:	230c      	movs	r3, #12
 80023a2:	6033      	str	r3, [r6, #0]
 80023a4:	2000      	movs	r0, #0
 80023a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002480 <_malloc_r+0xfc>
 80023ae:	f000 f869 	bl	8002484 <__malloc_lock>
 80023b2:	f8d8 3000 	ldr.w	r3, [r8]
 80023b6:	461c      	mov	r4, r3
 80023b8:	bb44      	cbnz	r4, 800240c <_malloc_r+0x88>
 80023ba:	4629      	mov	r1, r5
 80023bc:	4630      	mov	r0, r6
 80023be:	f7ff ffbf 	bl	8002340 <sbrk_aligned>
 80023c2:	1c43      	adds	r3, r0, #1
 80023c4:	4604      	mov	r4, r0
 80023c6:	d158      	bne.n	800247a <_malloc_r+0xf6>
 80023c8:	f8d8 4000 	ldr.w	r4, [r8]
 80023cc:	4627      	mov	r7, r4
 80023ce:	2f00      	cmp	r7, #0
 80023d0:	d143      	bne.n	800245a <_malloc_r+0xd6>
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	d04b      	beq.n	800246e <_malloc_r+0xea>
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	4639      	mov	r1, r7
 80023da:	4630      	mov	r0, r6
 80023dc:	eb04 0903 	add.w	r9, r4, r3
 80023e0:	f000 fb60 	bl	8002aa4 <_sbrk_r>
 80023e4:	4581      	cmp	r9, r0
 80023e6:	d142      	bne.n	800246e <_malloc_r+0xea>
 80023e8:	6821      	ldr	r1, [r4, #0]
 80023ea:	1a6d      	subs	r5, r5, r1
 80023ec:	4629      	mov	r1, r5
 80023ee:	4630      	mov	r0, r6
 80023f0:	f7ff ffa6 	bl	8002340 <sbrk_aligned>
 80023f4:	3001      	adds	r0, #1
 80023f6:	d03a      	beq.n	800246e <_malloc_r+0xea>
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	442b      	add	r3, r5
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	bb62      	cbnz	r2, 8002460 <_malloc_r+0xdc>
 8002406:	f8c8 7000 	str.w	r7, [r8]
 800240a:	e00f      	b.n	800242c <_malloc_r+0xa8>
 800240c:	6822      	ldr	r2, [r4, #0]
 800240e:	1b52      	subs	r2, r2, r5
 8002410:	d420      	bmi.n	8002454 <_malloc_r+0xd0>
 8002412:	2a0b      	cmp	r2, #11
 8002414:	d917      	bls.n	8002446 <_malloc_r+0xc2>
 8002416:	1961      	adds	r1, r4, r5
 8002418:	42a3      	cmp	r3, r4
 800241a:	6025      	str	r5, [r4, #0]
 800241c:	bf18      	it	ne
 800241e:	6059      	strne	r1, [r3, #4]
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	bf08      	it	eq
 8002424:	f8c8 1000 	streq.w	r1, [r8]
 8002428:	5162      	str	r2, [r4, r5]
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	4630      	mov	r0, r6
 800242e:	f000 f82f 	bl	8002490 <__malloc_unlock>
 8002432:	f104 000b 	add.w	r0, r4, #11
 8002436:	1d23      	adds	r3, r4, #4
 8002438:	f020 0007 	bic.w	r0, r0, #7
 800243c:	1ac2      	subs	r2, r0, r3
 800243e:	bf1c      	itt	ne
 8002440:	1a1b      	subne	r3, r3, r0
 8002442:	50a3      	strne	r3, [r4, r2]
 8002444:	e7af      	b.n	80023a6 <_malloc_r+0x22>
 8002446:	6862      	ldr	r2, [r4, #4]
 8002448:	42a3      	cmp	r3, r4
 800244a:	bf0c      	ite	eq
 800244c:	f8c8 2000 	streq.w	r2, [r8]
 8002450:	605a      	strne	r2, [r3, #4]
 8002452:	e7eb      	b.n	800242c <_malloc_r+0xa8>
 8002454:	4623      	mov	r3, r4
 8002456:	6864      	ldr	r4, [r4, #4]
 8002458:	e7ae      	b.n	80023b8 <_malloc_r+0x34>
 800245a:	463c      	mov	r4, r7
 800245c:	687f      	ldr	r7, [r7, #4]
 800245e:	e7b6      	b.n	80023ce <_malloc_r+0x4a>
 8002460:	461a      	mov	r2, r3
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	42a3      	cmp	r3, r4
 8002466:	d1fb      	bne.n	8002460 <_malloc_r+0xdc>
 8002468:	2300      	movs	r3, #0
 800246a:	6053      	str	r3, [r2, #4]
 800246c:	e7de      	b.n	800242c <_malloc_r+0xa8>
 800246e:	230c      	movs	r3, #12
 8002470:	6033      	str	r3, [r6, #0]
 8002472:	4630      	mov	r0, r6
 8002474:	f000 f80c 	bl	8002490 <__malloc_unlock>
 8002478:	e794      	b.n	80023a4 <_malloc_r+0x20>
 800247a:	6005      	str	r5, [r0, #0]
 800247c:	e7d6      	b.n	800242c <_malloc_r+0xa8>
 800247e:	bf00      	nop
 8002480:	200002bc 	.word	0x200002bc

08002484 <__malloc_lock>:
 8002484:	4801      	ldr	r0, [pc, #4]	@ (800248c <__malloc_lock+0x8>)
 8002486:	f7ff bf0f 	b.w	80022a8 <__retarget_lock_acquire_recursive>
 800248a:	bf00      	nop
 800248c:	200002b4 	.word	0x200002b4

08002490 <__malloc_unlock>:
 8002490:	4801      	ldr	r0, [pc, #4]	@ (8002498 <__malloc_unlock+0x8>)
 8002492:	f7ff bf0a 	b.w	80022aa <__retarget_lock_release_recursive>
 8002496:	bf00      	nop
 8002498:	200002b4 	.word	0x200002b4

0800249c <__ssputs_r>:
 800249c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a0:	688e      	ldr	r6, [r1, #8]
 80024a2:	461f      	mov	r7, r3
 80024a4:	42be      	cmp	r6, r7
 80024a6:	4682      	mov	sl, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	4690      	mov	r8, r2
 80024ac:	4633      	mov	r3, r6
 80024ae:	d853      	bhi.n	8002558 <__ssputs_r+0xbc>
 80024b0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80024b4:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 80024b8:	d02b      	beq.n	8002512 <__ssputs_r+0x76>
 80024ba:	6965      	ldr	r5, [r4, #20]
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	6909      	ldr	r1, [r1, #16]
 80024c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024c4:	eba3 0901 	sub.w	r9, r3, r1
 80024c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024cc:	1c7b      	adds	r3, r7, #1
 80024ce:	106d      	asrs	r5, r5, #1
 80024d0:	444b      	add	r3, r9
 80024d2:	42ab      	cmp	r3, r5
 80024d4:	462a      	mov	r2, r5
 80024d6:	bf84      	itt	hi
 80024d8:	461d      	movhi	r5, r3
 80024da:	462a      	movhi	r2, r5
 80024dc:	0543      	lsls	r3, r0, #21
 80024de:	d527      	bpl.n	8002530 <__ssputs_r+0x94>
 80024e0:	4611      	mov	r1, r2
 80024e2:	4650      	mov	r0, sl
 80024e4:	f7ff ff4e 	bl	8002384 <_malloc_r>
 80024e8:	4606      	mov	r6, r0
 80024ea:	b358      	cbz	r0, 8002544 <__ssputs_r+0xa8>
 80024ec:	6921      	ldr	r1, [r4, #16]
 80024ee:	464a      	mov	r2, r9
 80024f0:	f000 fae8 	bl	8002ac4 <memcpy>
 80024f4:	89a3      	ldrh	r3, [r4, #12]
 80024f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80024fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024fe:	81a3      	strh	r3, [r4, #12]
 8002500:	6126      	str	r6, [r4, #16]
 8002502:	6165      	str	r5, [r4, #20]
 8002504:	444e      	add	r6, r9
 8002506:	eba5 0509 	sub.w	r5, r5, r9
 800250a:	6026      	str	r6, [r4, #0]
 800250c:	60a5      	str	r5, [r4, #8]
 800250e:	463e      	mov	r6, r7
 8002510:	463b      	mov	r3, r7
 8002512:	461f      	mov	r7, r3
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	463a      	mov	r2, r7
 8002518:	4641      	mov	r1, r8
 800251a:	f000 faa9 	bl	8002a70 <memmove>
 800251e:	68a3      	ldr	r3, [r4, #8]
 8002520:	1b9b      	subs	r3, r3, r6
 8002522:	60a3      	str	r3, [r4, #8]
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	443b      	add	r3, r7
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	2000      	movs	r0, #0
 800252c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002530:	4650      	mov	r0, sl
 8002532:	f000 fad5 	bl	8002ae0 <_realloc_r>
 8002536:	4606      	mov	r6, r0
 8002538:	2800      	cmp	r0, #0
 800253a:	d1e1      	bne.n	8002500 <__ssputs_r+0x64>
 800253c:	6921      	ldr	r1, [r4, #16]
 800253e:	4650      	mov	r0, sl
 8002540:	f7ff feb4 	bl	80022ac <_free_r>
 8002544:	230c      	movs	r3, #12
 8002546:	f8ca 3000 	str.w	r3, [sl]
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	f04f 30ff 	mov.w	r0, #4294967295
 8002556:	e7e9      	b.n	800252c <__ssputs_r+0x90>
 8002558:	463e      	mov	r6, r7
 800255a:	e7db      	b.n	8002514 <__ssputs_r+0x78>

0800255c <_svfiprintf_r>:
 800255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002560:	4698      	mov	r8, r3
 8002562:	898b      	ldrh	r3, [r1, #12]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	b09d      	sub	sp, #116	@ 0x74
 8002568:	4607      	mov	r7, r0
 800256a:	460d      	mov	r5, r1
 800256c:	4614      	mov	r4, r2
 800256e:	d510      	bpl.n	8002592 <_svfiprintf_r+0x36>
 8002570:	690b      	ldr	r3, [r1, #16]
 8002572:	b973      	cbnz	r3, 8002592 <_svfiprintf_r+0x36>
 8002574:	2140      	movs	r1, #64	@ 0x40
 8002576:	f7ff ff05 	bl	8002384 <_malloc_r>
 800257a:	6028      	str	r0, [r5, #0]
 800257c:	6128      	str	r0, [r5, #16]
 800257e:	b930      	cbnz	r0, 800258e <_svfiprintf_r+0x32>
 8002580:	230c      	movs	r3, #12
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	b01d      	add	sp, #116	@ 0x74
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258e:	2340      	movs	r3, #64	@ 0x40
 8002590:	616b      	str	r3, [r5, #20]
 8002592:	2300      	movs	r3, #0
 8002594:	9309      	str	r3, [sp, #36]	@ 0x24
 8002596:	2320      	movs	r3, #32
 8002598:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800259c:	f8cd 800c 	str.w	r8, [sp, #12]
 80025a0:	2330      	movs	r3, #48	@ 0x30
 80025a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002740 <_svfiprintf_r+0x1e4>
 80025a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025aa:	f04f 0901 	mov.w	r9, #1
 80025ae:	4623      	mov	r3, r4
 80025b0:	469a      	mov	sl, r3
 80025b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025b6:	b10a      	cbz	r2, 80025bc <_svfiprintf_r+0x60>
 80025b8:	2a25      	cmp	r2, #37	@ 0x25
 80025ba:	d1f9      	bne.n	80025b0 <_svfiprintf_r+0x54>
 80025bc:	ebba 0b04 	subs.w	fp, sl, r4
 80025c0:	d00b      	beq.n	80025da <_svfiprintf_r+0x7e>
 80025c2:	465b      	mov	r3, fp
 80025c4:	4622      	mov	r2, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	4638      	mov	r0, r7
 80025ca:	f7ff ff67 	bl	800249c <__ssputs_r>
 80025ce:	3001      	adds	r0, #1
 80025d0:	f000 80a7 	beq.w	8002722 <_svfiprintf_r+0x1c6>
 80025d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025d6:	445a      	add	r2, fp
 80025d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80025da:	f89a 3000 	ldrb.w	r3, [sl]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 809f 	beq.w	8002722 <_svfiprintf_r+0x1c6>
 80025e4:	2300      	movs	r3, #0
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025ee:	f10a 0a01 	add.w	sl, sl, #1
 80025f2:	9304      	str	r3, [sp, #16]
 80025f4:	9307      	str	r3, [sp, #28]
 80025f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80025fc:	4654      	mov	r4, sl
 80025fe:	2205      	movs	r2, #5
 8002600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002604:	484e      	ldr	r0, [pc, #312]	@ (8002740 <_svfiprintf_r+0x1e4>)
 8002606:	f7fd fdeb 	bl	80001e0 <memchr>
 800260a:	9a04      	ldr	r2, [sp, #16]
 800260c:	b9d8      	cbnz	r0, 8002646 <_svfiprintf_r+0xea>
 800260e:	06d0      	lsls	r0, r2, #27
 8002610:	bf44      	itt	mi
 8002612:	2320      	movmi	r3, #32
 8002614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002618:	0711      	lsls	r1, r2, #28
 800261a:	bf44      	itt	mi
 800261c:	232b      	movmi	r3, #43	@ 0x2b
 800261e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002622:	f89a 3000 	ldrb.w	r3, [sl]
 8002626:	2b2a      	cmp	r3, #42	@ 0x2a
 8002628:	d015      	beq.n	8002656 <_svfiprintf_r+0xfa>
 800262a:	9a07      	ldr	r2, [sp, #28]
 800262c:	4654      	mov	r4, sl
 800262e:	2000      	movs	r0, #0
 8002630:	f04f 0c0a 	mov.w	ip, #10
 8002634:	4621      	mov	r1, r4
 8002636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800263a:	3b30      	subs	r3, #48	@ 0x30
 800263c:	2b09      	cmp	r3, #9
 800263e:	d94b      	bls.n	80026d8 <_svfiprintf_r+0x17c>
 8002640:	b1b0      	cbz	r0, 8002670 <_svfiprintf_r+0x114>
 8002642:	9207      	str	r2, [sp, #28]
 8002644:	e014      	b.n	8002670 <_svfiprintf_r+0x114>
 8002646:	eba0 0308 	sub.w	r3, r0, r8
 800264a:	fa09 f303 	lsl.w	r3, r9, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	9304      	str	r3, [sp, #16]
 8002652:	46a2      	mov	sl, r4
 8002654:	e7d2      	b.n	80025fc <_svfiprintf_r+0xa0>
 8002656:	9b03      	ldr	r3, [sp, #12]
 8002658:	1d19      	adds	r1, r3, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	9103      	str	r1, [sp, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	bfbb      	ittet	lt
 8002662:	425b      	neglt	r3, r3
 8002664:	f042 0202 	orrlt.w	r2, r2, #2
 8002668:	9307      	strge	r3, [sp, #28]
 800266a:	9307      	strlt	r3, [sp, #28]
 800266c:	bfb8      	it	lt
 800266e:	9204      	strlt	r2, [sp, #16]
 8002670:	7823      	ldrb	r3, [r4, #0]
 8002672:	2b2e      	cmp	r3, #46	@ 0x2e
 8002674:	d10a      	bne.n	800268c <_svfiprintf_r+0x130>
 8002676:	7863      	ldrb	r3, [r4, #1]
 8002678:	2b2a      	cmp	r3, #42	@ 0x2a
 800267a:	d132      	bne.n	80026e2 <_svfiprintf_r+0x186>
 800267c:	9b03      	ldr	r3, [sp, #12]
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	9203      	str	r2, [sp, #12]
 8002684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002688:	3402      	adds	r4, #2
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002750 <_svfiprintf_r+0x1f4>
 8002690:	7821      	ldrb	r1, [r4, #0]
 8002692:	2203      	movs	r2, #3
 8002694:	4650      	mov	r0, sl
 8002696:	f7fd fda3 	bl	80001e0 <memchr>
 800269a:	b138      	cbz	r0, 80026ac <_svfiprintf_r+0x150>
 800269c:	9b04      	ldr	r3, [sp, #16]
 800269e:	eba0 000a 	sub.w	r0, r0, sl
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	4082      	lsls	r2, r0
 80026a6:	4313      	orrs	r3, r2
 80026a8:	3401      	adds	r4, #1
 80026aa:	9304      	str	r3, [sp, #16]
 80026ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b0:	4824      	ldr	r0, [pc, #144]	@ (8002744 <_svfiprintf_r+0x1e8>)
 80026b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026b6:	2206      	movs	r2, #6
 80026b8:	f7fd fd92 	bl	80001e0 <memchr>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d036      	beq.n	800272e <_svfiprintf_r+0x1d2>
 80026c0:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <_svfiprintf_r+0x1ec>)
 80026c2:	bb1b      	cbnz	r3, 800270c <_svfiprintf_r+0x1b0>
 80026c4:	9b03      	ldr	r3, [sp, #12]
 80026c6:	3307      	adds	r3, #7
 80026c8:	f023 0307 	bic.w	r3, r3, #7
 80026cc:	3308      	adds	r3, #8
 80026ce:	9303      	str	r3, [sp, #12]
 80026d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026d2:	4433      	add	r3, r6
 80026d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80026d6:	e76a      	b.n	80025ae <_svfiprintf_r+0x52>
 80026d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80026dc:	460c      	mov	r4, r1
 80026de:	2001      	movs	r0, #1
 80026e0:	e7a8      	b.n	8002634 <_svfiprintf_r+0xd8>
 80026e2:	2300      	movs	r3, #0
 80026e4:	3401      	adds	r4, #1
 80026e6:	9305      	str	r3, [sp, #20]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0c0a 	mov.w	ip, #10
 80026ee:	4620      	mov	r0, r4
 80026f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026f4:	3a30      	subs	r2, #48	@ 0x30
 80026f6:	2a09      	cmp	r2, #9
 80026f8:	d903      	bls.n	8002702 <_svfiprintf_r+0x1a6>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0c6      	beq.n	800268c <_svfiprintf_r+0x130>
 80026fe:	9105      	str	r1, [sp, #20]
 8002700:	e7c4      	b.n	800268c <_svfiprintf_r+0x130>
 8002702:	fb0c 2101 	mla	r1, ip, r1, r2
 8002706:	4604      	mov	r4, r0
 8002708:	2301      	movs	r3, #1
 800270a:	e7f0      	b.n	80026ee <_svfiprintf_r+0x192>
 800270c:	ab03      	add	r3, sp, #12
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	462a      	mov	r2, r5
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <_svfiprintf_r+0x1f0>)
 8002714:	a904      	add	r1, sp, #16
 8002716:	4638      	mov	r0, r7
 8002718:	f3af 8000 	nop.w
 800271c:	1c42      	adds	r2, r0, #1
 800271e:	4606      	mov	r6, r0
 8002720:	d1d6      	bne.n	80026d0 <_svfiprintf_r+0x174>
 8002722:	89ab      	ldrh	r3, [r5, #12]
 8002724:	065b      	lsls	r3, r3, #25
 8002726:	f53f af2d 	bmi.w	8002584 <_svfiprintf_r+0x28>
 800272a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800272c:	e72c      	b.n	8002588 <_svfiprintf_r+0x2c>
 800272e:	ab03      	add	r3, sp, #12
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	462a      	mov	r2, r5
 8002734:	4b05      	ldr	r3, [pc, #20]	@ (800274c <_svfiprintf_r+0x1f0>)
 8002736:	a904      	add	r1, sp, #16
 8002738:	4638      	mov	r0, r7
 800273a:	f000 f879 	bl	8002830 <_printf_i>
 800273e:	e7ed      	b.n	800271c <_svfiprintf_r+0x1c0>
 8002740:	08002eac 	.word	0x08002eac
 8002744:	08002eb6 	.word	0x08002eb6
 8002748:	00000000 	.word	0x00000000
 800274c:	0800249d 	.word	0x0800249d
 8002750:	08002eb2 	.word	0x08002eb2

08002754 <_printf_common>:
 8002754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002758:	4616      	mov	r6, r2
 800275a:	4698      	mov	r8, r3
 800275c:	688a      	ldr	r2, [r1, #8]
 800275e:	690b      	ldr	r3, [r1, #16]
 8002760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002764:	4293      	cmp	r3, r2
 8002766:	bfb8      	it	lt
 8002768:	4613      	movlt	r3, r2
 800276a:	6033      	str	r3, [r6, #0]
 800276c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002770:	4607      	mov	r7, r0
 8002772:	460c      	mov	r4, r1
 8002774:	b10a      	cbz	r2, 800277a <_printf_common+0x26>
 8002776:	3301      	adds	r3, #1
 8002778:	6033      	str	r3, [r6, #0]
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	0699      	lsls	r1, r3, #26
 800277e:	bf42      	ittt	mi
 8002780:	6833      	ldrmi	r3, [r6, #0]
 8002782:	3302      	addmi	r3, #2
 8002784:	6033      	strmi	r3, [r6, #0]
 8002786:	6825      	ldr	r5, [r4, #0]
 8002788:	f015 0506 	ands.w	r5, r5, #6
 800278c:	d106      	bne.n	800279c <_printf_common+0x48>
 800278e:	f104 0a19 	add.w	sl, r4, #25
 8002792:	68e3      	ldr	r3, [r4, #12]
 8002794:	6832      	ldr	r2, [r6, #0]
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	42ab      	cmp	r3, r5
 800279a:	dc26      	bgt.n	80027ea <_printf_common+0x96>
 800279c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	3b00      	subs	r3, #0
 80027a4:	bf18      	it	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	0692      	lsls	r2, r2, #26
 80027aa:	d42b      	bmi.n	8002804 <_printf_common+0xb0>
 80027ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027b0:	4641      	mov	r1, r8
 80027b2:	4638      	mov	r0, r7
 80027b4:	47c8      	blx	r9
 80027b6:	3001      	adds	r0, #1
 80027b8:	d01e      	beq.n	80027f8 <_printf_common+0xa4>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	6922      	ldr	r2, [r4, #16]
 80027be:	f003 0306 	and.w	r3, r3, #6
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	bf02      	ittt	eq
 80027c6:	68e5      	ldreq	r5, [r4, #12]
 80027c8:	6833      	ldreq	r3, [r6, #0]
 80027ca:	1aed      	subeq	r5, r5, r3
 80027cc:	68a3      	ldr	r3, [r4, #8]
 80027ce:	bf0c      	ite	eq
 80027d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027d4:	2500      	movne	r5, #0
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bfc4      	itt	gt
 80027da:	1a9b      	subgt	r3, r3, r2
 80027dc:	18ed      	addgt	r5, r5, r3
 80027de:	2600      	movs	r6, #0
 80027e0:	341a      	adds	r4, #26
 80027e2:	42b5      	cmp	r5, r6
 80027e4:	d11a      	bne.n	800281c <_printf_common+0xc8>
 80027e6:	2000      	movs	r0, #0
 80027e8:	e008      	b.n	80027fc <_printf_common+0xa8>
 80027ea:	2301      	movs	r3, #1
 80027ec:	4652      	mov	r2, sl
 80027ee:	4641      	mov	r1, r8
 80027f0:	4638      	mov	r0, r7
 80027f2:	47c8      	blx	r9
 80027f4:	3001      	adds	r0, #1
 80027f6:	d103      	bne.n	8002800 <_printf_common+0xac>
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002800:	3501      	adds	r5, #1
 8002802:	e7c6      	b.n	8002792 <_printf_common+0x3e>
 8002804:	18e1      	adds	r1, r4, r3
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	2030      	movs	r0, #48	@ 0x30
 800280a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800280e:	4422      	add	r2, r4
 8002810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002818:	3302      	adds	r3, #2
 800281a:	e7c7      	b.n	80027ac <_printf_common+0x58>
 800281c:	2301      	movs	r3, #1
 800281e:	4622      	mov	r2, r4
 8002820:	4641      	mov	r1, r8
 8002822:	4638      	mov	r0, r7
 8002824:	47c8      	blx	r9
 8002826:	3001      	adds	r0, #1
 8002828:	d0e6      	beq.n	80027f8 <_printf_common+0xa4>
 800282a:	3601      	adds	r6, #1
 800282c:	e7d9      	b.n	80027e2 <_printf_common+0x8e>
	...

08002830 <_printf_i>:
 8002830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002834:	7e0f      	ldrb	r7, [r1, #24]
 8002836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002838:	2f78      	cmp	r7, #120	@ 0x78
 800283a:	4691      	mov	r9, r2
 800283c:	4680      	mov	r8, r0
 800283e:	460c      	mov	r4, r1
 8002840:	469a      	mov	sl, r3
 8002842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002846:	d807      	bhi.n	8002858 <_printf_i+0x28>
 8002848:	2f62      	cmp	r7, #98	@ 0x62
 800284a:	d80a      	bhi.n	8002862 <_printf_i+0x32>
 800284c:	2f00      	cmp	r7, #0
 800284e:	f000 80d2 	beq.w	80029f6 <_printf_i+0x1c6>
 8002852:	2f58      	cmp	r7, #88	@ 0x58
 8002854:	f000 80b7 	beq.w	80029c6 <_printf_i+0x196>
 8002858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800285c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002860:	e03a      	b.n	80028d8 <_printf_i+0xa8>
 8002862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002866:	2b15      	cmp	r3, #21
 8002868:	d8f6      	bhi.n	8002858 <_printf_i+0x28>
 800286a:	a101      	add	r1, pc, #4	@ (adr r1, 8002870 <_printf_i+0x40>)
 800286c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002870:	080028c9 	.word	0x080028c9
 8002874:	080028dd 	.word	0x080028dd
 8002878:	08002859 	.word	0x08002859
 800287c:	08002859 	.word	0x08002859
 8002880:	08002859 	.word	0x08002859
 8002884:	08002859 	.word	0x08002859
 8002888:	080028dd 	.word	0x080028dd
 800288c:	08002859 	.word	0x08002859
 8002890:	08002859 	.word	0x08002859
 8002894:	08002859 	.word	0x08002859
 8002898:	08002859 	.word	0x08002859
 800289c:	080029dd 	.word	0x080029dd
 80028a0:	08002907 	.word	0x08002907
 80028a4:	08002993 	.word	0x08002993
 80028a8:	08002859 	.word	0x08002859
 80028ac:	08002859 	.word	0x08002859
 80028b0:	080029ff 	.word	0x080029ff
 80028b4:	08002859 	.word	0x08002859
 80028b8:	08002907 	.word	0x08002907
 80028bc:	08002859 	.word	0x08002859
 80028c0:	08002859 	.word	0x08002859
 80028c4:	0800299b 	.word	0x0800299b
 80028c8:	6833      	ldr	r3, [r6, #0]
 80028ca:	1d1a      	adds	r2, r3, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6032      	str	r2, [r6, #0]
 80028d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028d8:	2301      	movs	r3, #1
 80028da:	e09d      	b.n	8002a18 <_printf_i+0x1e8>
 80028dc:	6833      	ldr	r3, [r6, #0]
 80028de:	6820      	ldr	r0, [r4, #0]
 80028e0:	1d19      	adds	r1, r3, #4
 80028e2:	6031      	str	r1, [r6, #0]
 80028e4:	0606      	lsls	r6, r0, #24
 80028e6:	d501      	bpl.n	80028ec <_printf_i+0xbc>
 80028e8:	681d      	ldr	r5, [r3, #0]
 80028ea:	e003      	b.n	80028f4 <_printf_i+0xc4>
 80028ec:	0645      	lsls	r5, r0, #25
 80028ee:	d5fb      	bpl.n	80028e8 <_printf_i+0xb8>
 80028f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028f4:	2d00      	cmp	r5, #0
 80028f6:	da03      	bge.n	8002900 <_printf_i+0xd0>
 80028f8:	232d      	movs	r3, #45	@ 0x2d
 80028fa:	426d      	negs	r5, r5
 80028fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002900:	4859      	ldr	r0, [pc, #356]	@ (8002a68 <_printf_i+0x238>)
 8002902:	230a      	movs	r3, #10
 8002904:	e010      	b.n	8002928 <_printf_i+0xf8>
 8002906:	6821      	ldr	r1, [r4, #0]
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	0608      	lsls	r0, r1, #24
 800290c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002910:	d402      	bmi.n	8002918 <_printf_i+0xe8>
 8002912:	0649      	lsls	r1, r1, #25
 8002914:	bf48      	it	mi
 8002916:	b2ad      	uxthmi	r5, r5
 8002918:	2f6f      	cmp	r7, #111	@ 0x6f
 800291a:	4853      	ldr	r0, [pc, #332]	@ (8002a68 <_printf_i+0x238>)
 800291c:	6033      	str	r3, [r6, #0]
 800291e:	d159      	bne.n	80029d4 <_printf_i+0x1a4>
 8002920:	2308      	movs	r3, #8
 8002922:	2100      	movs	r1, #0
 8002924:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002928:	6866      	ldr	r6, [r4, #4]
 800292a:	60a6      	str	r6, [r4, #8]
 800292c:	2e00      	cmp	r6, #0
 800292e:	db05      	blt.n	800293c <_printf_i+0x10c>
 8002930:	6821      	ldr	r1, [r4, #0]
 8002932:	432e      	orrs	r6, r5
 8002934:	f021 0104 	bic.w	r1, r1, #4
 8002938:	6021      	str	r1, [r4, #0]
 800293a:	d04d      	beq.n	80029d8 <_printf_i+0x1a8>
 800293c:	4616      	mov	r6, r2
 800293e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002942:	fb03 5711 	mls	r7, r3, r1, r5
 8002946:	5dc7      	ldrb	r7, [r0, r7]
 8002948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800294c:	462f      	mov	r7, r5
 800294e:	42bb      	cmp	r3, r7
 8002950:	460d      	mov	r5, r1
 8002952:	d9f4      	bls.n	800293e <_printf_i+0x10e>
 8002954:	2b08      	cmp	r3, #8
 8002956:	d10b      	bne.n	8002970 <_printf_i+0x140>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	07df      	lsls	r7, r3, #31
 800295c:	d508      	bpl.n	8002970 <_printf_i+0x140>
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	6861      	ldr	r1, [r4, #4]
 8002962:	4299      	cmp	r1, r3
 8002964:	bfde      	ittt	le
 8002966:	2330      	movle	r3, #48	@ 0x30
 8002968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800296c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002970:	1b92      	subs	r2, r2, r6
 8002972:	6122      	str	r2, [r4, #16]
 8002974:	f8cd a000 	str.w	sl, [sp]
 8002978:	464b      	mov	r3, r9
 800297a:	aa03      	add	r2, sp, #12
 800297c:	4621      	mov	r1, r4
 800297e:	4640      	mov	r0, r8
 8002980:	f7ff fee8 	bl	8002754 <_printf_common>
 8002984:	3001      	adds	r0, #1
 8002986:	d14c      	bne.n	8002a22 <_printf_i+0x1f2>
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	b004      	add	sp, #16
 800298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	4834      	ldr	r0, [pc, #208]	@ (8002a6c <_printf_i+0x23c>)
 800299c:	2778      	movs	r7, #120	@ 0x78
 800299e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	6831      	ldr	r1, [r6, #0]
 80029a6:	061f      	lsls	r7, r3, #24
 80029a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80029ac:	d402      	bmi.n	80029b4 <_printf_i+0x184>
 80029ae:	065f      	lsls	r7, r3, #25
 80029b0:	bf48      	it	mi
 80029b2:	b2ad      	uxthmi	r5, r5
 80029b4:	6031      	str	r1, [r6, #0]
 80029b6:	07d9      	lsls	r1, r3, #31
 80029b8:	bf44      	itt	mi
 80029ba:	f043 0320 	orrmi.w	r3, r3, #32
 80029be:	6023      	strmi	r3, [r4, #0]
 80029c0:	b11d      	cbz	r5, 80029ca <_printf_i+0x19a>
 80029c2:	2310      	movs	r3, #16
 80029c4:	e7ad      	b.n	8002922 <_printf_i+0xf2>
 80029c6:	4828      	ldr	r0, [pc, #160]	@ (8002a68 <_printf_i+0x238>)
 80029c8:	e7e9      	b.n	800299e <_printf_i+0x16e>
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	f023 0320 	bic.w	r3, r3, #32
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	e7f6      	b.n	80029c2 <_printf_i+0x192>
 80029d4:	230a      	movs	r3, #10
 80029d6:	e7a4      	b.n	8002922 <_printf_i+0xf2>
 80029d8:	4616      	mov	r6, r2
 80029da:	e7bb      	b.n	8002954 <_printf_i+0x124>
 80029dc:	6833      	ldr	r3, [r6, #0]
 80029de:	6825      	ldr	r5, [r4, #0]
 80029e0:	6961      	ldr	r1, [r4, #20]
 80029e2:	1d18      	adds	r0, r3, #4
 80029e4:	6030      	str	r0, [r6, #0]
 80029e6:	062e      	lsls	r6, r5, #24
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	d501      	bpl.n	80029f0 <_printf_i+0x1c0>
 80029ec:	6019      	str	r1, [r3, #0]
 80029ee:	e002      	b.n	80029f6 <_printf_i+0x1c6>
 80029f0:	0668      	lsls	r0, r5, #25
 80029f2:	d5fb      	bpl.n	80029ec <_printf_i+0x1bc>
 80029f4:	8019      	strh	r1, [r3, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	6123      	str	r3, [r4, #16]
 80029fa:	4616      	mov	r6, r2
 80029fc:	e7ba      	b.n	8002974 <_printf_i+0x144>
 80029fe:	6833      	ldr	r3, [r6, #0]
 8002a00:	1d1a      	adds	r2, r3, #4
 8002a02:	6032      	str	r2, [r6, #0]
 8002a04:	681e      	ldr	r6, [r3, #0]
 8002a06:	6862      	ldr	r2, [r4, #4]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f7fd fbe8 	bl	80001e0 <memchr>
 8002a10:	b108      	cbz	r0, 8002a16 <_printf_i+0x1e6>
 8002a12:	1b80      	subs	r0, r0, r6
 8002a14:	6060      	str	r0, [r4, #4]
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	6123      	str	r3, [r4, #16]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a20:	e7a8      	b.n	8002974 <_printf_i+0x144>
 8002a22:	6923      	ldr	r3, [r4, #16]
 8002a24:	4632      	mov	r2, r6
 8002a26:	4649      	mov	r1, r9
 8002a28:	4640      	mov	r0, r8
 8002a2a:	47d0      	blx	sl
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d0ab      	beq.n	8002988 <_printf_i+0x158>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	079b      	lsls	r3, r3, #30
 8002a34:	d413      	bmi.n	8002a5e <_printf_i+0x22e>
 8002a36:	68e0      	ldr	r0, [r4, #12]
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	4298      	cmp	r0, r3
 8002a3c:	bfb8      	it	lt
 8002a3e:	4618      	movlt	r0, r3
 8002a40:	e7a4      	b.n	800298c <_printf_i+0x15c>
 8002a42:	2301      	movs	r3, #1
 8002a44:	4632      	mov	r2, r6
 8002a46:	4649      	mov	r1, r9
 8002a48:	4640      	mov	r0, r8
 8002a4a:	47d0      	blx	sl
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d09b      	beq.n	8002988 <_printf_i+0x158>
 8002a50:	3501      	adds	r5, #1
 8002a52:	68e3      	ldr	r3, [r4, #12]
 8002a54:	9903      	ldr	r1, [sp, #12]
 8002a56:	1a5b      	subs	r3, r3, r1
 8002a58:	42ab      	cmp	r3, r5
 8002a5a:	dcf2      	bgt.n	8002a42 <_printf_i+0x212>
 8002a5c:	e7eb      	b.n	8002a36 <_printf_i+0x206>
 8002a5e:	2500      	movs	r5, #0
 8002a60:	f104 0619 	add.w	r6, r4, #25
 8002a64:	e7f5      	b.n	8002a52 <_printf_i+0x222>
 8002a66:	bf00      	nop
 8002a68:	08002ebd 	.word	0x08002ebd
 8002a6c:	08002ece 	.word	0x08002ece

08002a70 <memmove>:
 8002a70:	4288      	cmp	r0, r1
 8002a72:	b510      	push	{r4, lr}
 8002a74:	eb01 0402 	add.w	r4, r1, r2
 8002a78:	d902      	bls.n	8002a80 <memmove+0x10>
 8002a7a:	4284      	cmp	r4, r0
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	d807      	bhi.n	8002a90 <memmove+0x20>
 8002a80:	1e43      	subs	r3, r0, #1
 8002a82:	42a1      	cmp	r1, r4
 8002a84:	d007      	beq.n	8002a96 <memmove+0x26>
 8002a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a8e:	e7f8      	b.n	8002a82 <memmove+0x12>
 8002a90:	4402      	add	r2, r0
 8002a92:	4282      	cmp	r2, r0
 8002a94:	d100      	bne.n	8002a98 <memmove+0x28>
 8002a96:	bd10      	pop	{r4, pc}
 8002a98:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8002a9c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002aa0:	e7f7      	b.n	8002a92 <memmove+0x22>
	...

08002aa4 <_sbrk_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4d06      	ldr	r5, [pc, #24]	@ (8002ac0 <_sbrk_r+0x1c>)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4608      	mov	r0, r1
 8002aae:	602b      	str	r3, [r5, #0]
 8002ab0:	f7ff fb4e 	bl	8002150 <_sbrk>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	d102      	bne.n	8002abe <_sbrk_r+0x1a>
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	b103      	cbz	r3, 8002abe <_sbrk_r+0x1a>
 8002abc:	6023      	str	r3, [r4, #0]
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	200002b0 	.word	0x200002b0

08002ac4 <memcpy>:
 8002ac4:	440a      	add	r2, r1
 8002ac6:	4291      	cmp	r1, r2
 8002ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002acc:	d100      	bne.n	8002ad0 <memcpy+0xc>
 8002ace:	4770      	bx	lr
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ada:	4291      	cmp	r1, r2
 8002adc:	d1f9      	bne.n	8002ad2 <memcpy+0xe>
 8002ade:	bd10      	pop	{r4, pc}

08002ae0 <_realloc_r>:
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae4:	4607      	mov	r7, r0
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	460d      	mov	r5, r1
 8002aea:	b921      	cbnz	r1, 8002af6 <_realloc_r+0x16>
 8002aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002af0:	4611      	mov	r1, r2
 8002af2:	f7ff bc47 	b.w	8002384 <_malloc_r>
 8002af6:	b92a      	cbnz	r2, 8002b04 <_realloc_r+0x24>
 8002af8:	f7ff fbd8 	bl	80022ac <_free_r>
 8002afc:	4625      	mov	r5, r4
 8002afe:	4628      	mov	r0, r5
 8002b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b04:	f000 f81a 	bl	8002b3c <_malloc_usable_size_r>
 8002b08:	4284      	cmp	r4, r0
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	d802      	bhi.n	8002b14 <_realloc_r+0x34>
 8002b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b12:	d8f4      	bhi.n	8002afe <_realloc_r+0x1e>
 8002b14:	4621      	mov	r1, r4
 8002b16:	4638      	mov	r0, r7
 8002b18:	f7ff fc34 	bl	8002384 <_malloc_r>
 8002b1c:	4680      	mov	r8, r0
 8002b1e:	b908      	cbnz	r0, 8002b24 <_realloc_r+0x44>
 8002b20:	4645      	mov	r5, r8
 8002b22:	e7ec      	b.n	8002afe <_realloc_r+0x1e>
 8002b24:	42b4      	cmp	r4, r6
 8002b26:	4622      	mov	r2, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	bf28      	it	cs
 8002b2c:	4632      	movcs	r2, r6
 8002b2e:	f7ff ffc9 	bl	8002ac4 <memcpy>
 8002b32:	4629      	mov	r1, r5
 8002b34:	4638      	mov	r0, r7
 8002b36:	f7ff fbb9 	bl	80022ac <_free_r>
 8002b3a:	e7f1      	b.n	8002b20 <_realloc_r+0x40>

08002b3c <_malloc_usable_size_r>:
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f18      	subs	r0, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfbc      	itt	lt
 8002b46:	580b      	ldrlt	r3, [r1, r0]
 8002b48:	18c0      	addlt	r0, r0, r3
 8002b4a:	4770      	bx	lr

08002b4c <__udivmoddi4>:
 8002b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	9d08      	ldr	r5, [sp, #32]
 8002b52:	460f      	mov	r7, r1
 8002b54:	4604      	mov	r4, r0
 8002b56:	468c      	mov	ip, r1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d148      	bne.n	8002bee <__udivmoddi4+0xa2>
 8002b5c:	428a      	cmp	r2, r1
 8002b5e:	4616      	mov	r6, r2
 8002b60:	d961      	bls.n	8002c26 <__udivmoddi4+0xda>
 8002b62:	fab2 f382 	clz	r3, r2
 8002b66:	b14b      	cbz	r3, 8002b7c <__udivmoddi4+0x30>
 8002b68:	f1c3 0220 	rsb	r2, r3, #32
 8002b6c:	fa01 fc03 	lsl.w	ip, r1, r3
 8002b70:	fa20 f202 	lsr.w	r2, r0, r2
 8002b74:	409e      	lsls	r6, r3
 8002b76:	ea42 0c0c 	orr.w	ip, r2, ip
 8002b7a:	409c      	lsls	r4, r3
 8002b7c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002b80:	b2b7      	uxth	r7, r6
 8002b82:	fbbc f1fe 	udiv	r1, ip, lr
 8002b86:	0c22      	lsrs	r2, r4, #16
 8002b88:	fb0e cc11 	mls	ip, lr, r1, ip
 8002b8c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8002b90:	fb01 f007 	mul.w	r0, r1, r7
 8002b94:	4290      	cmp	r0, r2
 8002b96:	d909      	bls.n	8002bac <__udivmoddi4+0x60>
 8002b98:	18b2      	adds	r2, r6, r2
 8002b9a:	f101 3cff 	add.w	ip, r1, #4294967295
 8002b9e:	f080 80ee 	bcs.w	8002d7e <__udivmoddi4+0x232>
 8002ba2:	4290      	cmp	r0, r2
 8002ba4:	f240 80eb 	bls.w	8002d7e <__udivmoddi4+0x232>
 8002ba8:	3902      	subs	r1, #2
 8002baa:	4432      	add	r2, r6
 8002bac:	1a12      	subs	r2, r2, r0
 8002bae:	b2a4      	uxth	r4, r4
 8002bb0:	fbb2 f0fe 	udiv	r0, r2, lr
 8002bb4:	fb0e 2210 	mls	r2, lr, r0, r2
 8002bb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002bbc:	fb00 f707 	mul.w	r7, r0, r7
 8002bc0:	42a7      	cmp	r7, r4
 8002bc2:	d909      	bls.n	8002bd8 <__udivmoddi4+0x8c>
 8002bc4:	1934      	adds	r4, r6, r4
 8002bc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8002bca:	f080 80da 	bcs.w	8002d82 <__udivmoddi4+0x236>
 8002bce:	42a7      	cmp	r7, r4
 8002bd0:	f240 80d7 	bls.w	8002d82 <__udivmoddi4+0x236>
 8002bd4:	4434      	add	r4, r6
 8002bd6:	3802      	subs	r0, #2
 8002bd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002bdc:	1be4      	subs	r4, r4, r7
 8002bde:	2100      	movs	r1, #0
 8002be0:	b11d      	cbz	r5, 8002bea <__udivmoddi4+0x9e>
 8002be2:	40dc      	lsrs	r4, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	e9c5 4300 	strd	r4, r3, [r5]
 8002bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bee:	428b      	cmp	r3, r1
 8002bf0:	d906      	bls.n	8002c00 <__udivmoddi4+0xb4>
 8002bf2:	b10d      	cbz	r5, 8002bf8 <__udivmoddi4+0xac>
 8002bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4608      	mov	r0, r1
 8002bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c00:	fab3 f183 	clz	r1, r3
 8002c04:	2900      	cmp	r1, #0
 8002c06:	d148      	bne.n	8002c9a <__udivmoddi4+0x14e>
 8002c08:	42bb      	cmp	r3, r7
 8002c0a:	d302      	bcc.n	8002c12 <__udivmoddi4+0xc6>
 8002c0c:	4282      	cmp	r2, r0
 8002c0e:	f200 8107 	bhi.w	8002e20 <__udivmoddi4+0x2d4>
 8002c12:	1a84      	subs	r4, r0, r2
 8002c14:	eb67 0203 	sbc.w	r2, r7, r3
 8002c18:	2001      	movs	r0, #1
 8002c1a:	4694      	mov	ip, r2
 8002c1c:	2d00      	cmp	r5, #0
 8002c1e:	d0e4      	beq.n	8002bea <__udivmoddi4+0x9e>
 8002c20:	e9c5 4c00 	strd	r4, ip, [r5]
 8002c24:	e7e1      	b.n	8002bea <__udivmoddi4+0x9e>
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	f000 8092 	beq.w	8002d50 <__udivmoddi4+0x204>
 8002c2c:	fab2 f382 	clz	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 80a8 	bne.w	8002d86 <__udivmoddi4+0x23a>
 8002c36:	1a8a      	subs	r2, r1, r2
 8002c38:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002c3c:	fa1f fc86 	uxth.w	ip, r6
 8002c40:	2101      	movs	r1, #1
 8002c42:	0c20      	lsrs	r0, r4, #16
 8002c44:	fbb2 f7fe 	udiv	r7, r2, lr
 8002c48:	fb0e 2217 	mls	r2, lr, r7, r2
 8002c4c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8002c50:	fb0c f007 	mul.w	r0, ip, r7
 8002c54:	4290      	cmp	r0, r2
 8002c56:	d907      	bls.n	8002c68 <__udivmoddi4+0x11c>
 8002c58:	18b2      	adds	r2, r6, r2
 8002c5a:	f107 38ff 	add.w	r8, r7, #4294967295
 8002c5e:	d202      	bcs.n	8002c66 <__udivmoddi4+0x11a>
 8002c60:	4290      	cmp	r0, r2
 8002c62:	f200 80e2 	bhi.w	8002e2a <__udivmoddi4+0x2de>
 8002c66:	4647      	mov	r7, r8
 8002c68:	1a12      	subs	r2, r2, r0
 8002c6a:	b2a4      	uxth	r4, r4
 8002c6c:	fbb2 f0fe 	udiv	r0, r2, lr
 8002c70:	fb0e 2210 	mls	r2, lr, r0, r2
 8002c74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002c78:	fb0c fc00 	mul.w	ip, ip, r0
 8002c7c:	45a4      	cmp	ip, r4
 8002c7e:	d907      	bls.n	8002c90 <__udivmoddi4+0x144>
 8002c80:	1934      	adds	r4, r6, r4
 8002c82:	f100 32ff 	add.w	r2, r0, #4294967295
 8002c86:	d202      	bcs.n	8002c8e <__udivmoddi4+0x142>
 8002c88:	45a4      	cmp	ip, r4
 8002c8a:	f200 80cb 	bhi.w	8002e24 <__udivmoddi4+0x2d8>
 8002c8e:	4610      	mov	r0, r2
 8002c90:	eba4 040c 	sub.w	r4, r4, ip
 8002c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002c98:	e7a2      	b.n	8002be0 <__udivmoddi4+0x94>
 8002c9a:	f1c1 0620 	rsb	r6, r1, #32
 8002c9e:	408b      	lsls	r3, r1
 8002ca0:	fa22 fc06 	lsr.w	ip, r2, r6
 8002ca4:	ea4c 0c03 	orr.w	ip, ip, r3
 8002ca8:	fa07 f401 	lsl.w	r4, r7, r1
 8002cac:	fa20 f306 	lsr.w	r3, r0, r6
 8002cb0:	40f7      	lsrs	r7, r6
 8002cb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	fa00 f801 	lsl.w	r8, r0, r1
 8002cbc:	fa1f fe8c 	uxth.w	lr, ip
 8002cc0:	fbb7 f0f9 	udiv	r0, r7, r9
 8002cc4:	0c1c      	lsrs	r4, r3, #16
 8002cc6:	fb09 7710 	mls	r7, r9, r0, r7
 8002cca:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8002cce:	fb00 f70e 	mul.w	r7, r0, lr
 8002cd2:	42a7      	cmp	r7, r4
 8002cd4:	fa02 f201 	lsl.w	r2, r2, r1
 8002cd8:	d90a      	bls.n	8002cf0 <__udivmoddi4+0x1a4>
 8002cda:	eb1c 0404 	adds.w	r4, ip, r4
 8002cde:	f100 3aff 	add.w	sl, r0, #4294967295
 8002ce2:	f080 809b 	bcs.w	8002e1c <__udivmoddi4+0x2d0>
 8002ce6:	42a7      	cmp	r7, r4
 8002ce8:	f240 8098 	bls.w	8002e1c <__udivmoddi4+0x2d0>
 8002cec:	3802      	subs	r0, #2
 8002cee:	4464      	add	r4, ip
 8002cf0:	1be4      	subs	r4, r4, r7
 8002cf2:	b29f      	uxth	r7, r3
 8002cf4:	fbb4 f3f9 	udiv	r3, r4, r9
 8002cf8:	fb09 4413 	mls	r4, r9, r3, r4
 8002cfc:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8002d00:	fb03 fe0e 	mul.w	lr, r3, lr
 8002d04:	45a6      	cmp	lr, r4
 8002d06:	d909      	bls.n	8002d1c <__udivmoddi4+0x1d0>
 8002d08:	eb1c 0404 	adds.w	r4, ip, r4
 8002d0c:	f103 37ff 	add.w	r7, r3, #4294967295
 8002d10:	f080 8082 	bcs.w	8002e18 <__udivmoddi4+0x2cc>
 8002d14:	45a6      	cmp	lr, r4
 8002d16:	d97f      	bls.n	8002e18 <__udivmoddi4+0x2cc>
 8002d18:	3b02      	subs	r3, #2
 8002d1a:	4464      	add	r4, ip
 8002d1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002d20:	eba4 040e 	sub.w	r4, r4, lr
 8002d24:	fba0 e702 	umull	lr, r7, r0, r2
 8002d28:	42bc      	cmp	r4, r7
 8002d2a:	4673      	mov	r3, lr
 8002d2c:	46b9      	mov	r9, r7
 8002d2e:	d363      	bcc.n	8002df8 <__udivmoddi4+0x2ac>
 8002d30:	d060      	beq.n	8002df4 <__udivmoddi4+0x2a8>
 8002d32:	b15d      	cbz	r5, 8002d4c <__udivmoddi4+0x200>
 8002d34:	ebb8 0203 	subs.w	r2, r8, r3
 8002d38:	eb64 0409 	sbc.w	r4, r4, r9
 8002d3c:	fa04 f606 	lsl.w	r6, r4, r6
 8002d40:	fa22 f301 	lsr.w	r3, r2, r1
 8002d44:	431e      	orrs	r6, r3
 8002d46:	40cc      	lsrs	r4, r1
 8002d48:	e9c5 6400 	strd	r6, r4, [r5]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	e74c      	b.n	8002bea <__udivmoddi4+0x9e>
 8002d50:	0862      	lsrs	r2, r4, #1
 8002d52:	0848      	lsrs	r0, r1, #1
 8002d54:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8002d58:	0c0b      	lsrs	r3, r1, #16
 8002d5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002d5e:	b28a      	uxth	r2, r1
 8002d60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002d64:	fbb3 f1f6 	udiv	r1, r3, r6
 8002d68:	07e4      	lsls	r4, r4, #31
 8002d6a:	46b4      	mov	ip, r6
 8002d6c:	4637      	mov	r7, r6
 8002d6e:	46b6      	mov	lr, r6
 8002d70:	231f      	movs	r3, #31
 8002d72:	fbb0 f0f6 	udiv	r0, r0, r6
 8002d76:	1bd2      	subs	r2, r2, r7
 8002d78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002d7c:	e761      	b.n	8002c42 <__udivmoddi4+0xf6>
 8002d7e:	4661      	mov	r1, ip
 8002d80:	e714      	b.n	8002bac <__udivmoddi4+0x60>
 8002d82:	4610      	mov	r0, r2
 8002d84:	e728      	b.n	8002bd8 <__udivmoddi4+0x8c>
 8002d86:	f1c3 0120 	rsb	r1, r3, #32
 8002d8a:	fa20 f201 	lsr.w	r2, r0, r1
 8002d8e:	409e      	lsls	r6, r3
 8002d90:	fa27 f101 	lsr.w	r1, r7, r1
 8002d94:	409f      	lsls	r7, r3
 8002d96:	433a      	orrs	r2, r7
 8002d98:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002d9c:	fa1f fc86 	uxth.w	ip, r6
 8002da0:	fbb1 f7fe 	udiv	r7, r1, lr
 8002da4:	fb0e 1017 	mls	r0, lr, r7, r1
 8002da8:	0c11      	lsrs	r1, r2, #16
 8002daa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002dae:	fb07 f80c 	mul.w	r8, r7, ip
 8002db2:	4588      	cmp	r8, r1
 8002db4:	fa04 f403 	lsl.w	r4, r4, r3
 8002db8:	d93a      	bls.n	8002e30 <__udivmoddi4+0x2e4>
 8002dba:	1871      	adds	r1, r6, r1
 8002dbc:	f107 30ff 	add.w	r0, r7, #4294967295
 8002dc0:	d201      	bcs.n	8002dc6 <__udivmoddi4+0x27a>
 8002dc2:	4588      	cmp	r8, r1
 8002dc4:	d81f      	bhi.n	8002e06 <__udivmoddi4+0x2ba>
 8002dc6:	eba1 0108 	sub.w	r1, r1, r8
 8002dca:	fbb1 f8fe 	udiv	r8, r1, lr
 8002dce:	fb08 f70c 	mul.w	r7, r8, ip
 8002dd2:	fb0e 1118 	mls	r1, lr, r8, r1
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ddc:	42ba      	cmp	r2, r7
 8002dde:	d22f      	bcs.n	8002e40 <__udivmoddi4+0x2f4>
 8002de0:	18b2      	adds	r2, r6, r2
 8002de2:	f108 31ff 	add.w	r1, r8, #4294967295
 8002de6:	d2c6      	bcs.n	8002d76 <__udivmoddi4+0x22a>
 8002de8:	42ba      	cmp	r2, r7
 8002dea:	d2c4      	bcs.n	8002d76 <__udivmoddi4+0x22a>
 8002dec:	f1a8 0102 	sub.w	r1, r8, #2
 8002df0:	4432      	add	r2, r6
 8002df2:	e7c0      	b.n	8002d76 <__udivmoddi4+0x22a>
 8002df4:	45f0      	cmp	r8, lr
 8002df6:	d29c      	bcs.n	8002d32 <__udivmoddi4+0x1e6>
 8002df8:	ebbe 0302 	subs.w	r3, lr, r2
 8002dfc:	eb67 070c 	sbc.w	r7, r7, ip
 8002e00:	3801      	subs	r0, #1
 8002e02:	46b9      	mov	r9, r7
 8002e04:	e795      	b.n	8002d32 <__udivmoddi4+0x1e6>
 8002e06:	eba6 0808 	sub.w	r8, r6, r8
 8002e0a:	4441      	add	r1, r8
 8002e0c:	1eb8      	subs	r0, r7, #2
 8002e0e:	fbb1 f8fe 	udiv	r8, r1, lr
 8002e12:	fb08 f70c 	mul.w	r7, r8, ip
 8002e16:	e7dc      	b.n	8002dd2 <__udivmoddi4+0x286>
 8002e18:	463b      	mov	r3, r7
 8002e1a:	e77f      	b.n	8002d1c <__udivmoddi4+0x1d0>
 8002e1c:	4650      	mov	r0, sl
 8002e1e:	e767      	b.n	8002cf0 <__udivmoddi4+0x1a4>
 8002e20:	4608      	mov	r0, r1
 8002e22:	e6fb      	b.n	8002c1c <__udivmoddi4+0xd0>
 8002e24:	4434      	add	r4, r6
 8002e26:	3802      	subs	r0, #2
 8002e28:	e732      	b.n	8002c90 <__udivmoddi4+0x144>
 8002e2a:	3f02      	subs	r7, #2
 8002e2c:	4432      	add	r2, r6
 8002e2e:	e71b      	b.n	8002c68 <__udivmoddi4+0x11c>
 8002e30:	eba1 0108 	sub.w	r1, r1, r8
 8002e34:	4638      	mov	r0, r7
 8002e36:	fbb1 f8fe 	udiv	r8, r1, lr
 8002e3a:	fb08 f70c 	mul.w	r7, r8, ip
 8002e3e:	e7c8      	b.n	8002dd2 <__udivmoddi4+0x286>
 8002e40:	4641      	mov	r1, r8
 8002e42:	e798      	b.n	8002d76 <__udivmoddi4+0x22a>

08002e44 <_init>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr

08002e50 <_fini>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr
